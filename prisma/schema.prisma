generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                    Int          @id @default(autoincrement())
  nome                  String
  email                 String       @unique
  senha                 String
  cpf                   String       @unique
  celular               String
  codigoIndicacao       String?
  corridas              Corrida[]    @relation("PassageiroCorridas")
  indicacoesFeitas      Indicacao[]  @relation("Indicador")
  indicacoesRecebidas   Indicacao[]  @relation("Indicado")
  recompensas           Recompensa[]
}

model Motorista {
  id            Int              @id @default(autoincrement())
  nome          String
  email         String           @unique
  senha         String
  cnh           String
  veiculo       String
  corridas      Corrida[]        @relation("MotoristaCorridas")
  localizacoes  Localizacao[]
  saldo         SaldoMotorista?
}

model Corrida {
  id             Int        @id @default(autoincrement())
  origem         String
  destino        String
  formaPagamento String
  valor          Float
  status         String
  dataInicio     DateTime   @default(now())
  dataFim        DateTime?
  passageiroId   Int
  motoristaId    Int?
  avaliacao      Avaliacao?
  motorista      Motorista? @relation("MotoristaCorridas", fields: [motoristaId], references: [id])
  passageiro     Usuario    @relation("PassageiroCorridas", fields: [passageiroId], references: [id])
}

model Avaliacao {
  id        Int     @id @default(autoincrement())
  corridaId Int     @unique
  nota      Float
  tipo      String
  corrida   Corrida @relation(fields: [corridaId], references: [id])
}

model CorridaAgendada {
  id              Int      @id @default(autoincrement())
  passageiroCpf   String
  motoristaCpf    String?
  origem          String
  destino         String
  dataHora        DateTime
  status          String
  valor           Float
  formaPagamento  String
  criadaEm        DateTime @default(now())
}

model Localizacao {
  id           Int       @id @default(autoincrement())
  motoristaId  Int
  latitude     Float
  longitude    Float
  atualizadaEm DateTime  @default(now())
  motorista    Motorista @relation(fields: [motoristaId], references: [id])
}

model Recompensa {
  id              Int       @id @default(autoincrement())
  usuarioId       Int
  tipo            String
  valor           Float
  descricao       String
  dataRecebimento DateTime @default(now())
  usuario         Usuario   @relation(fields: [usuarioId], references: [id])
}

model SaldoMotorista {
  id           Int        @id @default(autoincrement())
  motoristaId  Int        @unique
  saldo        Float      @default(0)
  atualizadoEm DateTime   @default(now())
  motorista    Motorista  @relation(fields: [motoristaId], references: [id])
}

model Indicacao {
  id           Int      @id @default(autoincrement())
  codigo       String   @unique
  indicadoId   Int
  indicadorId  Int
  criadoEm     DateTime @default(now())

  indicado     Usuario  @relation("Indicado", fields: [indicadoId], references: [id])
  indicador    Usuario  @relation("Indicador", fields: [indicadorId], references: [id])
}
