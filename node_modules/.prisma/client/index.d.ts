
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Motorista
 * 
 */
export type Motorista = $Result.DefaultSelection<Prisma.$MotoristaPayload>
/**
 * Model Corrida
 * 
 */
export type Corrida = $Result.DefaultSelection<Prisma.$CorridaPayload>
/**
 * Model Avaliacao
 * 
 */
export type Avaliacao = $Result.DefaultSelection<Prisma.$AvaliacaoPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.motorista`: Exposes CRUD operations for the **Motorista** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Motoristas
    * const motoristas = await prisma.motorista.findMany()
    * ```
    */
  get motorista(): Prisma.MotoristaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.corrida`: Exposes CRUD operations for the **Corrida** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Corridas
    * const corridas = await prisma.corrida.findMany()
    * ```
    */
  get corrida(): Prisma.CorridaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.avaliacao`: Exposes CRUD operations for the **Avaliacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Avaliacaos
    * const avaliacaos = await prisma.avaliacao.findMany()
    * ```
    */
  get avaliacao(): Prisma.AvaliacaoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Motorista: 'Motorista',
    Corrida: 'Corrida',
    Avaliacao: 'Avaliacao'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "motorista" | "corrida" | "avaliacao"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Motorista: {
        payload: Prisma.$MotoristaPayload<ExtArgs>
        fields: Prisma.MotoristaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MotoristaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotoristaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MotoristaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotoristaPayload>
          }
          findFirst: {
            args: Prisma.MotoristaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotoristaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MotoristaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotoristaPayload>
          }
          findMany: {
            args: Prisma.MotoristaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotoristaPayload>[]
          }
          create: {
            args: Prisma.MotoristaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotoristaPayload>
          }
          createMany: {
            args: Prisma.MotoristaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MotoristaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotoristaPayload>[]
          }
          delete: {
            args: Prisma.MotoristaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotoristaPayload>
          }
          update: {
            args: Prisma.MotoristaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotoristaPayload>
          }
          deleteMany: {
            args: Prisma.MotoristaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MotoristaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MotoristaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotoristaPayload>[]
          }
          upsert: {
            args: Prisma.MotoristaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MotoristaPayload>
          }
          aggregate: {
            args: Prisma.MotoristaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMotorista>
          }
          groupBy: {
            args: Prisma.MotoristaGroupByArgs<ExtArgs>
            result: $Utils.Optional<MotoristaGroupByOutputType>[]
          }
          count: {
            args: Prisma.MotoristaCountArgs<ExtArgs>
            result: $Utils.Optional<MotoristaCountAggregateOutputType> | number
          }
        }
      }
      Corrida: {
        payload: Prisma.$CorridaPayload<ExtArgs>
        fields: Prisma.CorridaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CorridaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CorridaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridaPayload>
          }
          findFirst: {
            args: Prisma.CorridaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CorridaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridaPayload>
          }
          findMany: {
            args: Prisma.CorridaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridaPayload>[]
          }
          create: {
            args: Prisma.CorridaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridaPayload>
          }
          createMany: {
            args: Prisma.CorridaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CorridaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridaPayload>[]
          }
          delete: {
            args: Prisma.CorridaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridaPayload>
          }
          update: {
            args: Prisma.CorridaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridaPayload>
          }
          deleteMany: {
            args: Prisma.CorridaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CorridaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CorridaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridaPayload>[]
          }
          upsert: {
            args: Prisma.CorridaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridaPayload>
          }
          aggregate: {
            args: Prisma.CorridaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCorrida>
          }
          groupBy: {
            args: Prisma.CorridaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CorridaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CorridaCountArgs<ExtArgs>
            result: $Utils.Optional<CorridaCountAggregateOutputType> | number
          }
        }
      }
      Avaliacao: {
        payload: Prisma.$AvaliacaoPayload<ExtArgs>
        fields: Prisma.AvaliacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AvaliacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvaliacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AvaliacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvaliacaoPayload>
          }
          findFirst: {
            args: Prisma.AvaliacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvaliacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AvaliacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvaliacaoPayload>
          }
          findMany: {
            args: Prisma.AvaliacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvaliacaoPayload>[]
          }
          create: {
            args: Prisma.AvaliacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvaliacaoPayload>
          }
          createMany: {
            args: Prisma.AvaliacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AvaliacaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvaliacaoPayload>[]
          }
          delete: {
            args: Prisma.AvaliacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvaliacaoPayload>
          }
          update: {
            args: Prisma.AvaliacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvaliacaoPayload>
          }
          deleteMany: {
            args: Prisma.AvaliacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AvaliacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AvaliacaoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvaliacaoPayload>[]
          }
          upsert: {
            args: Prisma.AvaliacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvaliacaoPayload>
          }
          aggregate: {
            args: Prisma.AvaliacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAvaliacao>
          }
          groupBy: {
            args: Prisma.AvaliacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<AvaliacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AvaliacaoCountArgs<ExtArgs>
            result: $Utils.Optional<AvaliacaoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    motorista?: MotoristaOmit
    corrida?: CorridaOmit
    avaliacao?: AvaliacaoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    corridas: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corridas?: boolean | UsuarioCountOutputTypeCountCorridasArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountCorridasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorridaWhereInput
  }


  /**
   * Count Type MotoristaCountOutputType
   */

  export type MotoristaCountOutputType = {
    corridas: number
  }

  export type MotoristaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corridas?: boolean | MotoristaCountOutputTypeCountCorridasArgs
  }

  // Custom InputTypes
  /**
   * MotoristaCountOutputType without action
   */
  export type MotoristaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MotoristaCountOutputType
     */
    select?: MotoristaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MotoristaCountOutputType without action
   */
  export type MotoristaCountOutputTypeCountCorridasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorridaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    cpf: string | null
    celular: string | null
    codigoIndicacao: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    cpf: string | null
    celular: string | null
    codigoIndicacao: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    cpf: number
    celular: number
    codigoIndicacao: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    cpf?: true
    celular?: true
    codigoIndicacao?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    cpf?: true
    celular?: true
    codigoIndicacao?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    cpf?: true
    celular?: true
    codigoIndicacao?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    codigoIndicacao: string | null
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cpf?: boolean
    celular?: boolean
    codigoIndicacao?: boolean
    corridas?: boolean | Usuario$corridasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cpf?: boolean
    celular?: boolean
    codigoIndicacao?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cpf?: boolean
    celular?: boolean
    codigoIndicacao?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cpf?: boolean
    celular?: boolean
    codigoIndicacao?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "senha" | "cpf" | "celular" | "codigoIndicacao", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corridas?: boolean | Usuario$corridasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      corridas: Prisma.$CorridaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
      cpf: string
      celular: string
      codigoIndicacao: string | null
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    corridas<T extends Usuario$corridasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$corridasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
    readonly cpf: FieldRef<"Usuario", 'String'>
    readonly celular: FieldRef<"Usuario", 'String'>
    readonly codigoIndicacao: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.corridas
   */
  export type Usuario$corridasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaInclude<ExtArgs> | null
    where?: CorridaWhereInput
    orderBy?: CorridaOrderByWithRelationInput | CorridaOrderByWithRelationInput[]
    cursor?: CorridaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CorridaScalarFieldEnum | CorridaScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Motorista
   */

  export type AggregateMotorista = {
    _count: MotoristaCountAggregateOutputType | null
    _avg: MotoristaAvgAggregateOutputType | null
    _sum: MotoristaSumAggregateOutputType | null
    _min: MotoristaMinAggregateOutputType | null
    _max: MotoristaMaxAggregateOutputType | null
  }

  export type MotoristaAvgAggregateOutputType = {
    id: number | null
  }

  export type MotoristaSumAggregateOutputType = {
    id: number | null
  }

  export type MotoristaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    cnh: string | null
    veiculo: string | null
  }

  export type MotoristaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    cnh: string | null
    veiculo: string | null
  }

  export type MotoristaCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    cnh: number
    veiculo: number
    _all: number
  }


  export type MotoristaAvgAggregateInputType = {
    id?: true
  }

  export type MotoristaSumAggregateInputType = {
    id?: true
  }

  export type MotoristaMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    cnh?: true
    veiculo?: true
  }

  export type MotoristaMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    cnh?: true
    veiculo?: true
  }

  export type MotoristaCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    cnh?: true
    veiculo?: true
    _all?: true
  }

  export type MotoristaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Motorista to aggregate.
     */
    where?: MotoristaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Motoristas to fetch.
     */
    orderBy?: MotoristaOrderByWithRelationInput | MotoristaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MotoristaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Motoristas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Motoristas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Motoristas
    **/
    _count?: true | MotoristaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MotoristaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MotoristaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MotoristaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MotoristaMaxAggregateInputType
  }

  export type GetMotoristaAggregateType<T extends MotoristaAggregateArgs> = {
        [P in keyof T & keyof AggregateMotorista]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMotorista[P]>
      : GetScalarType<T[P], AggregateMotorista[P]>
  }




  export type MotoristaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MotoristaWhereInput
    orderBy?: MotoristaOrderByWithAggregationInput | MotoristaOrderByWithAggregationInput[]
    by: MotoristaScalarFieldEnum[] | MotoristaScalarFieldEnum
    having?: MotoristaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MotoristaCountAggregateInputType | true
    _avg?: MotoristaAvgAggregateInputType
    _sum?: MotoristaSumAggregateInputType
    _min?: MotoristaMinAggregateInputType
    _max?: MotoristaMaxAggregateInputType
  }

  export type MotoristaGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    cnh: string
    veiculo: string
    _count: MotoristaCountAggregateOutputType | null
    _avg: MotoristaAvgAggregateOutputType | null
    _sum: MotoristaSumAggregateOutputType | null
    _min: MotoristaMinAggregateOutputType | null
    _max: MotoristaMaxAggregateOutputType | null
  }

  type GetMotoristaGroupByPayload<T extends MotoristaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MotoristaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MotoristaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MotoristaGroupByOutputType[P]>
            : GetScalarType<T[P], MotoristaGroupByOutputType[P]>
        }
      >
    >


  export type MotoristaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cnh?: boolean
    veiculo?: boolean
    corridas?: boolean | Motorista$corridasArgs<ExtArgs>
    _count?: boolean | MotoristaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["motorista"]>

  export type MotoristaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cnh?: boolean
    veiculo?: boolean
  }, ExtArgs["result"]["motorista"]>

  export type MotoristaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cnh?: boolean
    veiculo?: boolean
  }, ExtArgs["result"]["motorista"]>

  export type MotoristaSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cnh?: boolean
    veiculo?: boolean
  }

  export type MotoristaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "senha" | "cnh" | "veiculo", ExtArgs["result"]["motorista"]>
  export type MotoristaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corridas?: boolean | Motorista$corridasArgs<ExtArgs>
    _count?: boolean | MotoristaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MotoristaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MotoristaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MotoristaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Motorista"
    objects: {
      corridas: Prisma.$CorridaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
      cnh: string
      veiculo: string
    }, ExtArgs["result"]["motorista"]>
    composites: {}
  }

  type MotoristaGetPayload<S extends boolean | null | undefined | MotoristaDefaultArgs> = $Result.GetResult<Prisma.$MotoristaPayload, S>

  type MotoristaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MotoristaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MotoristaCountAggregateInputType | true
    }

  export interface MotoristaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Motorista'], meta: { name: 'Motorista' } }
    /**
     * Find zero or one Motorista that matches the filter.
     * @param {MotoristaFindUniqueArgs} args - Arguments to find a Motorista
     * @example
     * // Get one Motorista
     * const motorista = await prisma.motorista.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MotoristaFindUniqueArgs>(args: SelectSubset<T, MotoristaFindUniqueArgs<ExtArgs>>): Prisma__MotoristaClient<$Result.GetResult<Prisma.$MotoristaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Motorista that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MotoristaFindUniqueOrThrowArgs} args - Arguments to find a Motorista
     * @example
     * // Get one Motorista
     * const motorista = await prisma.motorista.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MotoristaFindUniqueOrThrowArgs>(args: SelectSubset<T, MotoristaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MotoristaClient<$Result.GetResult<Prisma.$MotoristaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Motorista that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotoristaFindFirstArgs} args - Arguments to find a Motorista
     * @example
     * // Get one Motorista
     * const motorista = await prisma.motorista.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MotoristaFindFirstArgs>(args?: SelectSubset<T, MotoristaFindFirstArgs<ExtArgs>>): Prisma__MotoristaClient<$Result.GetResult<Prisma.$MotoristaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Motorista that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotoristaFindFirstOrThrowArgs} args - Arguments to find a Motorista
     * @example
     * // Get one Motorista
     * const motorista = await prisma.motorista.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MotoristaFindFirstOrThrowArgs>(args?: SelectSubset<T, MotoristaFindFirstOrThrowArgs<ExtArgs>>): Prisma__MotoristaClient<$Result.GetResult<Prisma.$MotoristaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Motoristas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotoristaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Motoristas
     * const motoristas = await prisma.motorista.findMany()
     * 
     * // Get first 10 Motoristas
     * const motoristas = await prisma.motorista.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const motoristaWithIdOnly = await prisma.motorista.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MotoristaFindManyArgs>(args?: SelectSubset<T, MotoristaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MotoristaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Motorista.
     * @param {MotoristaCreateArgs} args - Arguments to create a Motorista.
     * @example
     * // Create one Motorista
     * const Motorista = await prisma.motorista.create({
     *   data: {
     *     // ... data to create a Motorista
     *   }
     * })
     * 
     */
    create<T extends MotoristaCreateArgs>(args: SelectSubset<T, MotoristaCreateArgs<ExtArgs>>): Prisma__MotoristaClient<$Result.GetResult<Prisma.$MotoristaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Motoristas.
     * @param {MotoristaCreateManyArgs} args - Arguments to create many Motoristas.
     * @example
     * // Create many Motoristas
     * const motorista = await prisma.motorista.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MotoristaCreateManyArgs>(args?: SelectSubset<T, MotoristaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Motoristas and returns the data saved in the database.
     * @param {MotoristaCreateManyAndReturnArgs} args - Arguments to create many Motoristas.
     * @example
     * // Create many Motoristas
     * const motorista = await prisma.motorista.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Motoristas and only return the `id`
     * const motoristaWithIdOnly = await prisma.motorista.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MotoristaCreateManyAndReturnArgs>(args?: SelectSubset<T, MotoristaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MotoristaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Motorista.
     * @param {MotoristaDeleteArgs} args - Arguments to delete one Motorista.
     * @example
     * // Delete one Motorista
     * const Motorista = await prisma.motorista.delete({
     *   where: {
     *     // ... filter to delete one Motorista
     *   }
     * })
     * 
     */
    delete<T extends MotoristaDeleteArgs>(args: SelectSubset<T, MotoristaDeleteArgs<ExtArgs>>): Prisma__MotoristaClient<$Result.GetResult<Prisma.$MotoristaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Motorista.
     * @param {MotoristaUpdateArgs} args - Arguments to update one Motorista.
     * @example
     * // Update one Motorista
     * const motorista = await prisma.motorista.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MotoristaUpdateArgs>(args: SelectSubset<T, MotoristaUpdateArgs<ExtArgs>>): Prisma__MotoristaClient<$Result.GetResult<Prisma.$MotoristaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Motoristas.
     * @param {MotoristaDeleteManyArgs} args - Arguments to filter Motoristas to delete.
     * @example
     * // Delete a few Motoristas
     * const { count } = await prisma.motorista.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MotoristaDeleteManyArgs>(args?: SelectSubset<T, MotoristaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Motoristas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotoristaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Motoristas
     * const motorista = await prisma.motorista.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MotoristaUpdateManyArgs>(args: SelectSubset<T, MotoristaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Motoristas and returns the data updated in the database.
     * @param {MotoristaUpdateManyAndReturnArgs} args - Arguments to update many Motoristas.
     * @example
     * // Update many Motoristas
     * const motorista = await prisma.motorista.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Motoristas and only return the `id`
     * const motoristaWithIdOnly = await prisma.motorista.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MotoristaUpdateManyAndReturnArgs>(args: SelectSubset<T, MotoristaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MotoristaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Motorista.
     * @param {MotoristaUpsertArgs} args - Arguments to update or create a Motorista.
     * @example
     * // Update or create a Motorista
     * const motorista = await prisma.motorista.upsert({
     *   create: {
     *     // ... data to create a Motorista
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Motorista we want to update
     *   }
     * })
     */
    upsert<T extends MotoristaUpsertArgs>(args: SelectSubset<T, MotoristaUpsertArgs<ExtArgs>>): Prisma__MotoristaClient<$Result.GetResult<Prisma.$MotoristaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Motoristas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotoristaCountArgs} args - Arguments to filter Motoristas to count.
     * @example
     * // Count the number of Motoristas
     * const count = await prisma.motorista.count({
     *   where: {
     *     // ... the filter for the Motoristas we want to count
     *   }
     * })
    **/
    count<T extends MotoristaCountArgs>(
      args?: Subset<T, MotoristaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MotoristaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Motorista.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotoristaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MotoristaAggregateArgs>(args: Subset<T, MotoristaAggregateArgs>): Prisma.PrismaPromise<GetMotoristaAggregateType<T>>

    /**
     * Group by Motorista.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MotoristaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MotoristaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MotoristaGroupByArgs['orderBy'] }
        : { orderBy?: MotoristaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MotoristaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMotoristaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Motorista model
   */
  readonly fields: MotoristaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Motorista.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MotoristaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    corridas<T extends Motorista$corridasArgs<ExtArgs> = {}>(args?: Subset<T, Motorista$corridasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Motorista model
   */
  interface MotoristaFieldRefs {
    readonly id: FieldRef<"Motorista", 'Int'>
    readonly nome: FieldRef<"Motorista", 'String'>
    readonly email: FieldRef<"Motorista", 'String'>
    readonly senha: FieldRef<"Motorista", 'String'>
    readonly cnh: FieldRef<"Motorista", 'String'>
    readonly veiculo: FieldRef<"Motorista", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Motorista findUnique
   */
  export type MotoristaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motorista
     */
    select?: MotoristaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Motorista
     */
    omit?: MotoristaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotoristaInclude<ExtArgs> | null
    /**
     * Filter, which Motorista to fetch.
     */
    where: MotoristaWhereUniqueInput
  }

  /**
   * Motorista findUniqueOrThrow
   */
  export type MotoristaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motorista
     */
    select?: MotoristaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Motorista
     */
    omit?: MotoristaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotoristaInclude<ExtArgs> | null
    /**
     * Filter, which Motorista to fetch.
     */
    where: MotoristaWhereUniqueInput
  }

  /**
   * Motorista findFirst
   */
  export type MotoristaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motorista
     */
    select?: MotoristaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Motorista
     */
    omit?: MotoristaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotoristaInclude<ExtArgs> | null
    /**
     * Filter, which Motorista to fetch.
     */
    where?: MotoristaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Motoristas to fetch.
     */
    orderBy?: MotoristaOrderByWithRelationInput | MotoristaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Motoristas.
     */
    cursor?: MotoristaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Motoristas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Motoristas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Motoristas.
     */
    distinct?: MotoristaScalarFieldEnum | MotoristaScalarFieldEnum[]
  }

  /**
   * Motorista findFirstOrThrow
   */
  export type MotoristaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motorista
     */
    select?: MotoristaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Motorista
     */
    omit?: MotoristaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotoristaInclude<ExtArgs> | null
    /**
     * Filter, which Motorista to fetch.
     */
    where?: MotoristaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Motoristas to fetch.
     */
    orderBy?: MotoristaOrderByWithRelationInput | MotoristaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Motoristas.
     */
    cursor?: MotoristaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Motoristas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Motoristas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Motoristas.
     */
    distinct?: MotoristaScalarFieldEnum | MotoristaScalarFieldEnum[]
  }

  /**
   * Motorista findMany
   */
  export type MotoristaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motorista
     */
    select?: MotoristaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Motorista
     */
    omit?: MotoristaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotoristaInclude<ExtArgs> | null
    /**
     * Filter, which Motoristas to fetch.
     */
    where?: MotoristaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Motoristas to fetch.
     */
    orderBy?: MotoristaOrderByWithRelationInput | MotoristaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Motoristas.
     */
    cursor?: MotoristaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Motoristas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Motoristas.
     */
    skip?: number
    distinct?: MotoristaScalarFieldEnum | MotoristaScalarFieldEnum[]
  }

  /**
   * Motorista create
   */
  export type MotoristaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motorista
     */
    select?: MotoristaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Motorista
     */
    omit?: MotoristaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotoristaInclude<ExtArgs> | null
    /**
     * The data needed to create a Motorista.
     */
    data: XOR<MotoristaCreateInput, MotoristaUncheckedCreateInput>
  }

  /**
   * Motorista createMany
   */
  export type MotoristaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Motoristas.
     */
    data: MotoristaCreateManyInput | MotoristaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Motorista createManyAndReturn
   */
  export type MotoristaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motorista
     */
    select?: MotoristaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Motorista
     */
    omit?: MotoristaOmit<ExtArgs> | null
    /**
     * The data used to create many Motoristas.
     */
    data: MotoristaCreateManyInput | MotoristaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Motorista update
   */
  export type MotoristaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motorista
     */
    select?: MotoristaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Motorista
     */
    omit?: MotoristaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotoristaInclude<ExtArgs> | null
    /**
     * The data needed to update a Motorista.
     */
    data: XOR<MotoristaUpdateInput, MotoristaUncheckedUpdateInput>
    /**
     * Choose, which Motorista to update.
     */
    where: MotoristaWhereUniqueInput
  }

  /**
   * Motorista updateMany
   */
  export type MotoristaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Motoristas.
     */
    data: XOR<MotoristaUpdateManyMutationInput, MotoristaUncheckedUpdateManyInput>
    /**
     * Filter which Motoristas to update
     */
    where?: MotoristaWhereInput
    /**
     * Limit how many Motoristas to update.
     */
    limit?: number
  }

  /**
   * Motorista updateManyAndReturn
   */
  export type MotoristaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motorista
     */
    select?: MotoristaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Motorista
     */
    omit?: MotoristaOmit<ExtArgs> | null
    /**
     * The data used to update Motoristas.
     */
    data: XOR<MotoristaUpdateManyMutationInput, MotoristaUncheckedUpdateManyInput>
    /**
     * Filter which Motoristas to update
     */
    where?: MotoristaWhereInput
    /**
     * Limit how many Motoristas to update.
     */
    limit?: number
  }

  /**
   * Motorista upsert
   */
  export type MotoristaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motorista
     */
    select?: MotoristaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Motorista
     */
    omit?: MotoristaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotoristaInclude<ExtArgs> | null
    /**
     * The filter to search for the Motorista to update in case it exists.
     */
    where: MotoristaWhereUniqueInput
    /**
     * In case the Motorista found by the `where` argument doesn't exist, create a new Motorista with this data.
     */
    create: XOR<MotoristaCreateInput, MotoristaUncheckedCreateInput>
    /**
     * In case the Motorista was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MotoristaUpdateInput, MotoristaUncheckedUpdateInput>
  }

  /**
   * Motorista delete
   */
  export type MotoristaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motorista
     */
    select?: MotoristaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Motorista
     */
    omit?: MotoristaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotoristaInclude<ExtArgs> | null
    /**
     * Filter which Motorista to delete.
     */
    where: MotoristaWhereUniqueInput
  }

  /**
   * Motorista deleteMany
   */
  export type MotoristaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Motoristas to delete
     */
    where?: MotoristaWhereInput
    /**
     * Limit how many Motoristas to delete.
     */
    limit?: number
  }

  /**
   * Motorista.corridas
   */
  export type Motorista$corridasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaInclude<ExtArgs> | null
    where?: CorridaWhereInput
    orderBy?: CorridaOrderByWithRelationInput | CorridaOrderByWithRelationInput[]
    cursor?: CorridaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CorridaScalarFieldEnum | CorridaScalarFieldEnum[]
  }

  /**
   * Motorista without action
   */
  export type MotoristaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motorista
     */
    select?: MotoristaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Motorista
     */
    omit?: MotoristaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotoristaInclude<ExtArgs> | null
  }


  /**
   * Model Corrida
   */

  export type AggregateCorrida = {
    _count: CorridaCountAggregateOutputType | null
    _avg: CorridaAvgAggregateOutputType | null
    _sum: CorridaSumAggregateOutputType | null
    _min: CorridaMinAggregateOutputType | null
    _max: CorridaMaxAggregateOutputType | null
  }

  export type CorridaAvgAggregateOutputType = {
    id: number | null
    valor: number | null
    passageiroId: number | null
    motoristaId: number | null
  }

  export type CorridaSumAggregateOutputType = {
    id: number | null
    valor: number | null
    passageiroId: number | null
    motoristaId: number | null
  }

  export type CorridaMinAggregateOutputType = {
    id: number | null
    origem: string | null
    destino: string | null
    formaPagamento: string | null
    valor: number | null
    status: string | null
    dataInicio: Date | null
    dataFim: Date | null
    passageiroId: number | null
    motoristaId: number | null
  }

  export type CorridaMaxAggregateOutputType = {
    id: number | null
    origem: string | null
    destino: string | null
    formaPagamento: string | null
    valor: number | null
    status: string | null
    dataInicio: Date | null
    dataFim: Date | null
    passageiroId: number | null
    motoristaId: number | null
  }

  export type CorridaCountAggregateOutputType = {
    id: number
    origem: number
    destino: number
    formaPagamento: number
    valor: number
    status: number
    dataInicio: number
    dataFim: number
    passageiroId: number
    motoristaId: number
    _all: number
  }


  export type CorridaAvgAggregateInputType = {
    id?: true
    valor?: true
    passageiroId?: true
    motoristaId?: true
  }

  export type CorridaSumAggregateInputType = {
    id?: true
    valor?: true
    passageiroId?: true
    motoristaId?: true
  }

  export type CorridaMinAggregateInputType = {
    id?: true
    origem?: true
    destino?: true
    formaPagamento?: true
    valor?: true
    status?: true
    dataInicio?: true
    dataFim?: true
    passageiroId?: true
    motoristaId?: true
  }

  export type CorridaMaxAggregateInputType = {
    id?: true
    origem?: true
    destino?: true
    formaPagamento?: true
    valor?: true
    status?: true
    dataInicio?: true
    dataFim?: true
    passageiroId?: true
    motoristaId?: true
  }

  export type CorridaCountAggregateInputType = {
    id?: true
    origem?: true
    destino?: true
    formaPagamento?: true
    valor?: true
    status?: true
    dataInicio?: true
    dataFim?: true
    passageiroId?: true
    motoristaId?: true
    _all?: true
  }

  export type CorridaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Corrida to aggregate.
     */
    where?: CorridaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Corridas to fetch.
     */
    orderBy?: CorridaOrderByWithRelationInput | CorridaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CorridaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Corridas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Corridas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Corridas
    **/
    _count?: true | CorridaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CorridaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CorridaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CorridaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CorridaMaxAggregateInputType
  }

  export type GetCorridaAggregateType<T extends CorridaAggregateArgs> = {
        [P in keyof T & keyof AggregateCorrida]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCorrida[P]>
      : GetScalarType<T[P], AggregateCorrida[P]>
  }




  export type CorridaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorridaWhereInput
    orderBy?: CorridaOrderByWithAggregationInput | CorridaOrderByWithAggregationInput[]
    by: CorridaScalarFieldEnum[] | CorridaScalarFieldEnum
    having?: CorridaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CorridaCountAggregateInputType | true
    _avg?: CorridaAvgAggregateInputType
    _sum?: CorridaSumAggregateInputType
    _min?: CorridaMinAggregateInputType
    _max?: CorridaMaxAggregateInputType
  }

  export type CorridaGroupByOutputType = {
    id: number
    origem: string
    destino: string
    formaPagamento: string
    valor: number
    status: string
    dataInicio: Date
    dataFim: Date | null
    passageiroId: number
    motoristaId: number | null
    _count: CorridaCountAggregateOutputType | null
    _avg: CorridaAvgAggregateOutputType | null
    _sum: CorridaSumAggregateOutputType | null
    _min: CorridaMinAggregateOutputType | null
    _max: CorridaMaxAggregateOutputType | null
  }

  type GetCorridaGroupByPayload<T extends CorridaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CorridaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CorridaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CorridaGroupByOutputType[P]>
            : GetScalarType<T[P], CorridaGroupByOutputType[P]>
        }
      >
    >


  export type CorridaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    origem?: boolean
    destino?: boolean
    formaPagamento?: boolean
    valor?: boolean
    status?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    passageiroId?: boolean
    motoristaId?: boolean
    passageiro?: boolean | UsuarioDefaultArgs<ExtArgs>
    motorista?: boolean | Corrida$motoristaArgs<ExtArgs>
    avaliacao?: boolean | Corrida$avaliacaoArgs<ExtArgs>
  }, ExtArgs["result"]["corrida"]>

  export type CorridaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    origem?: boolean
    destino?: boolean
    formaPagamento?: boolean
    valor?: boolean
    status?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    passageiroId?: boolean
    motoristaId?: boolean
    passageiro?: boolean | UsuarioDefaultArgs<ExtArgs>
    motorista?: boolean | Corrida$motoristaArgs<ExtArgs>
  }, ExtArgs["result"]["corrida"]>

  export type CorridaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    origem?: boolean
    destino?: boolean
    formaPagamento?: boolean
    valor?: boolean
    status?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    passageiroId?: boolean
    motoristaId?: boolean
    passageiro?: boolean | UsuarioDefaultArgs<ExtArgs>
    motorista?: boolean | Corrida$motoristaArgs<ExtArgs>
  }, ExtArgs["result"]["corrida"]>

  export type CorridaSelectScalar = {
    id?: boolean
    origem?: boolean
    destino?: boolean
    formaPagamento?: boolean
    valor?: boolean
    status?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    passageiroId?: boolean
    motoristaId?: boolean
  }

  export type CorridaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "origem" | "destino" | "formaPagamento" | "valor" | "status" | "dataInicio" | "dataFim" | "passageiroId" | "motoristaId", ExtArgs["result"]["corrida"]>
  export type CorridaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passageiro?: boolean | UsuarioDefaultArgs<ExtArgs>
    motorista?: boolean | Corrida$motoristaArgs<ExtArgs>
    avaliacao?: boolean | Corrida$avaliacaoArgs<ExtArgs>
  }
  export type CorridaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passageiro?: boolean | UsuarioDefaultArgs<ExtArgs>
    motorista?: boolean | Corrida$motoristaArgs<ExtArgs>
  }
  export type CorridaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passageiro?: boolean | UsuarioDefaultArgs<ExtArgs>
    motorista?: boolean | Corrida$motoristaArgs<ExtArgs>
  }

  export type $CorridaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Corrida"
    objects: {
      passageiro: Prisma.$UsuarioPayload<ExtArgs>
      motorista: Prisma.$MotoristaPayload<ExtArgs> | null
      avaliacao: Prisma.$AvaliacaoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      origem: string
      destino: string
      formaPagamento: string
      valor: number
      status: string
      dataInicio: Date
      dataFim: Date | null
      passageiroId: number
      motoristaId: number | null
    }, ExtArgs["result"]["corrida"]>
    composites: {}
  }

  type CorridaGetPayload<S extends boolean | null | undefined | CorridaDefaultArgs> = $Result.GetResult<Prisma.$CorridaPayload, S>

  type CorridaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CorridaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CorridaCountAggregateInputType | true
    }

  export interface CorridaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Corrida'], meta: { name: 'Corrida' } }
    /**
     * Find zero or one Corrida that matches the filter.
     * @param {CorridaFindUniqueArgs} args - Arguments to find a Corrida
     * @example
     * // Get one Corrida
     * const corrida = await prisma.corrida.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CorridaFindUniqueArgs>(args: SelectSubset<T, CorridaFindUniqueArgs<ExtArgs>>): Prisma__CorridaClient<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Corrida that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CorridaFindUniqueOrThrowArgs} args - Arguments to find a Corrida
     * @example
     * // Get one Corrida
     * const corrida = await prisma.corrida.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CorridaFindUniqueOrThrowArgs>(args: SelectSubset<T, CorridaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CorridaClient<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Corrida that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridaFindFirstArgs} args - Arguments to find a Corrida
     * @example
     * // Get one Corrida
     * const corrida = await prisma.corrida.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CorridaFindFirstArgs>(args?: SelectSubset<T, CorridaFindFirstArgs<ExtArgs>>): Prisma__CorridaClient<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Corrida that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridaFindFirstOrThrowArgs} args - Arguments to find a Corrida
     * @example
     * // Get one Corrida
     * const corrida = await prisma.corrida.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CorridaFindFirstOrThrowArgs>(args?: SelectSubset<T, CorridaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CorridaClient<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Corridas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Corridas
     * const corridas = await prisma.corrida.findMany()
     * 
     * // Get first 10 Corridas
     * const corridas = await prisma.corrida.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const corridaWithIdOnly = await prisma.corrida.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CorridaFindManyArgs>(args?: SelectSubset<T, CorridaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Corrida.
     * @param {CorridaCreateArgs} args - Arguments to create a Corrida.
     * @example
     * // Create one Corrida
     * const Corrida = await prisma.corrida.create({
     *   data: {
     *     // ... data to create a Corrida
     *   }
     * })
     * 
     */
    create<T extends CorridaCreateArgs>(args: SelectSubset<T, CorridaCreateArgs<ExtArgs>>): Prisma__CorridaClient<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Corridas.
     * @param {CorridaCreateManyArgs} args - Arguments to create many Corridas.
     * @example
     * // Create many Corridas
     * const corrida = await prisma.corrida.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CorridaCreateManyArgs>(args?: SelectSubset<T, CorridaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Corridas and returns the data saved in the database.
     * @param {CorridaCreateManyAndReturnArgs} args - Arguments to create many Corridas.
     * @example
     * // Create many Corridas
     * const corrida = await prisma.corrida.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Corridas and only return the `id`
     * const corridaWithIdOnly = await prisma.corrida.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CorridaCreateManyAndReturnArgs>(args?: SelectSubset<T, CorridaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Corrida.
     * @param {CorridaDeleteArgs} args - Arguments to delete one Corrida.
     * @example
     * // Delete one Corrida
     * const Corrida = await prisma.corrida.delete({
     *   where: {
     *     // ... filter to delete one Corrida
     *   }
     * })
     * 
     */
    delete<T extends CorridaDeleteArgs>(args: SelectSubset<T, CorridaDeleteArgs<ExtArgs>>): Prisma__CorridaClient<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Corrida.
     * @param {CorridaUpdateArgs} args - Arguments to update one Corrida.
     * @example
     * // Update one Corrida
     * const corrida = await prisma.corrida.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CorridaUpdateArgs>(args: SelectSubset<T, CorridaUpdateArgs<ExtArgs>>): Prisma__CorridaClient<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Corridas.
     * @param {CorridaDeleteManyArgs} args - Arguments to filter Corridas to delete.
     * @example
     * // Delete a few Corridas
     * const { count } = await prisma.corrida.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CorridaDeleteManyArgs>(args?: SelectSubset<T, CorridaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Corridas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Corridas
     * const corrida = await prisma.corrida.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CorridaUpdateManyArgs>(args: SelectSubset<T, CorridaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Corridas and returns the data updated in the database.
     * @param {CorridaUpdateManyAndReturnArgs} args - Arguments to update many Corridas.
     * @example
     * // Update many Corridas
     * const corrida = await prisma.corrida.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Corridas and only return the `id`
     * const corridaWithIdOnly = await prisma.corrida.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CorridaUpdateManyAndReturnArgs>(args: SelectSubset<T, CorridaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Corrida.
     * @param {CorridaUpsertArgs} args - Arguments to update or create a Corrida.
     * @example
     * // Update or create a Corrida
     * const corrida = await prisma.corrida.upsert({
     *   create: {
     *     // ... data to create a Corrida
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Corrida we want to update
     *   }
     * })
     */
    upsert<T extends CorridaUpsertArgs>(args: SelectSubset<T, CorridaUpsertArgs<ExtArgs>>): Prisma__CorridaClient<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Corridas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridaCountArgs} args - Arguments to filter Corridas to count.
     * @example
     * // Count the number of Corridas
     * const count = await prisma.corrida.count({
     *   where: {
     *     // ... the filter for the Corridas we want to count
     *   }
     * })
    **/
    count<T extends CorridaCountArgs>(
      args?: Subset<T, CorridaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CorridaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Corrida.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CorridaAggregateArgs>(args: Subset<T, CorridaAggregateArgs>): Prisma.PrismaPromise<GetCorridaAggregateType<T>>

    /**
     * Group by Corrida.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CorridaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CorridaGroupByArgs['orderBy'] }
        : { orderBy?: CorridaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CorridaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCorridaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Corrida model
   */
  readonly fields: CorridaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Corrida.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CorridaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    passageiro<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    motorista<T extends Corrida$motoristaArgs<ExtArgs> = {}>(args?: Subset<T, Corrida$motoristaArgs<ExtArgs>>): Prisma__MotoristaClient<$Result.GetResult<Prisma.$MotoristaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    avaliacao<T extends Corrida$avaliacaoArgs<ExtArgs> = {}>(args?: Subset<T, Corrida$avaliacaoArgs<ExtArgs>>): Prisma__AvaliacaoClient<$Result.GetResult<Prisma.$AvaliacaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Corrida model
   */
  interface CorridaFieldRefs {
    readonly id: FieldRef<"Corrida", 'Int'>
    readonly origem: FieldRef<"Corrida", 'String'>
    readonly destino: FieldRef<"Corrida", 'String'>
    readonly formaPagamento: FieldRef<"Corrida", 'String'>
    readonly valor: FieldRef<"Corrida", 'Float'>
    readonly status: FieldRef<"Corrida", 'String'>
    readonly dataInicio: FieldRef<"Corrida", 'DateTime'>
    readonly dataFim: FieldRef<"Corrida", 'DateTime'>
    readonly passageiroId: FieldRef<"Corrida", 'Int'>
    readonly motoristaId: FieldRef<"Corrida", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Corrida findUnique
   */
  export type CorridaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaInclude<ExtArgs> | null
    /**
     * Filter, which Corrida to fetch.
     */
    where: CorridaWhereUniqueInput
  }

  /**
   * Corrida findUniqueOrThrow
   */
  export type CorridaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaInclude<ExtArgs> | null
    /**
     * Filter, which Corrida to fetch.
     */
    where: CorridaWhereUniqueInput
  }

  /**
   * Corrida findFirst
   */
  export type CorridaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaInclude<ExtArgs> | null
    /**
     * Filter, which Corrida to fetch.
     */
    where?: CorridaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Corridas to fetch.
     */
    orderBy?: CorridaOrderByWithRelationInput | CorridaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Corridas.
     */
    cursor?: CorridaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Corridas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Corridas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Corridas.
     */
    distinct?: CorridaScalarFieldEnum | CorridaScalarFieldEnum[]
  }

  /**
   * Corrida findFirstOrThrow
   */
  export type CorridaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaInclude<ExtArgs> | null
    /**
     * Filter, which Corrida to fetch.
     */
    where?: CorridaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Corridas to fetch.
     */
    orderBy?: CorridaOrderByWithRelationInput | CorridaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Corridas.
     */
    cursor?: CorridaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Corridas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Corridas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Corridas.
     */
    distinct?: CorridaScalarFieldEnum | CorridaScalarFieldEnum[]
  }

  /**
   * Corrida findMany
   */
  export type CorridaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaInclude<ExtArgs> | null
    /**
     * Filter, which Corridas to fetch.
     */
    where?: CorridaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Corridas to fetch.
     */
    orderBy?: CorridaOrderByWithRelationInput | CorridaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Corridas.
     */
    cursor?: CorridaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Corridas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Corridas.
     */
    skip?: number
    distinct?: CorridaScalarFieldEnum | CorridaScalarFieldEnum[]
  }

  /**
   * Corrida create
   */
  export type CorridaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaInclude<ExtArgs> | null
    /**
     * The data needed to create a Corrida.
     */
    data: XOR<CorridaCreateInput, CorridaUncheckedCreateInput>
  }

  /**
   * Corrida createMany
   */
  export type CorridaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Corridas.
     */
    data: CorridaCreateManyInput | CorridaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Corrida createManyAndReturn
   */
  export type CorridaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * The data used to create many Corridas.
     */
    data: CorridaCreateManyInput | CorridaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Corrida update
   */
  export type CorridaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaInclude<ExtArgs> | null
    /**
     * The data needed to update a Corrida.
     */
    data: XOR<CorridaUpdateInput, CorridaUncheckedUpdateInput>
    /**
     * Choose, which Corrida to update.
     */
    where: CorridaWhereUniqueInput
  }

  /**
   * Corrida updateMany
   */
  export type CorridaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Corridas.
     */
    data: XOR<CorridaUpdateManyMutationInput, CorridaUncheckedUpdateManyInput>
    /**
     * Filter which Corridas to update
     */
    where?: CorridaWhereInput
    /**
     * Limit how many Corridas to update.
     */
    limit?: number
  }

  /**
   * Corrida updateManyAndReturn
   */
  export type CorridaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * The data used to update Corridas.
     */
    data: XOR<CorridaUpdateManyMutationInput, CorridaUncheckedUpdateManyInput>
    /**
     * Filter which Corridas to update
     */
    where?: CorridaWhereInput
    /**
     * Limit how many Corridas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Corrida upsert
   */
  export type CorridaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaInclude<ExtArgs> | null
    /**
     * The filter to search for the Corrida to update in case it exists.
     */
    where: CorridaWhereUniqueInput
    /**
     * In case the Corrida found by the `where` argument doesn't exist, create a new Corrida with this data.
     */
    create: XOR<CorridaCreateInput, CorridaUncheckedCreateInput>
    /**
     * In case the Corrida was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CorridaUpdateInput, CorridaUncheckedUpdateInput>
  }

  /**
   * Corrida delete
   */
  export type CorridaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaInclude<ExtArgs> | null
    /**
     * Filter which Corrida to delete.
     */
    where: CorridaWhereUniqueInput
  }

  /**
   * Corrida deleteMany
   */
  export type CorridaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Corridas to delete
     */
    where?: CorridaWhereInput
    /**
     * Limit how many Corridas to delete.
     */
    limit?: number
  }

  /**
   * Corrida.motorista
   */
  export type Corrida$motoristaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Motorista
     */
    select?: MotoristaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Motorista
     */
    omit?: MotoristaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MotoristaInclude<ExtArgs> | null
    where?: MotoristaWhereInput
  }

  /**
   * Corrida.avaliacao
   */
  export type Corrida$avaliacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avaliacao
     */
    select?: AvaliacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avaliacao
     */
    omit?: AvaliacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvaliacaoInclude<ExtArgs> | null
    where?: AvaliacaoWhereInput
  }

  /**
   * Corrida without action
   */
  export type CorridaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corrida
     */
    select?: CorridaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corrida
     */
    omit?: CorridaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridaInclude<ExtArgs> | null
  }


  /**
   * Model Avaliacao
   */

  export type AggregateAvaliacao = {
    _count: AvaliacaoCountAggregateOutputType | null
    _avg: AvaliacaoAvgAggregateOutputType | null
    _sum: AvaliacaoSumAggregateOutputType | null
    _min: AvaliacaoMinAggregateOutputType | null
    _max: AvaliacaoMaxAggregateOutputType | null
  }

  export type AvaliacaoAvgAggregateOutputType = {
    id: number | null
    corridaId: number | null
    nota: number | null
  }

  export type AvaliacaoSumAggregateOutputType = {
    id: number | null
    corridaId: number | null
    nota: number | null
  }

  export type AvaliacaoMinAggregateOutputType = {
    id: number | null
    corridaId: number | null
    nota: number | null
    tipo: string | null
  }

  export type AvaliacaoMaxAggregateOutputType = {
    id: number | null
    corridaId: number | null
    nota: number | null
    tipo: string | null
  }

  export type AvaliacaoCountAggregateOutputType = {
    id: number
    corridaId: number
    nota: number
    tipo: number
    _all: number
  }


  export type AvaliacaoAvgAggregateInputType = {
    id?: true
    corridaId?: true
    nota?: true
  }

  export type AvaliacaoSumAggregateInputType = {
    id?: true
    corridaId?: true
    nota?: true
  }

  export type AvaliacaoMinAggregateInputType = {
    id?: true
    corridaId?: true
    nota?: true
    tipo?: true
  }

  export type AvaliacaoMaxAggregateInputType = {
    id?: true
    corridaId?: true
    nota?: true
    tipo?: true
  }

  export type AvaliacaoCountAggregateInputType = {
    id?: true
    corridaId?: true
    nota?: true
    tipo?: true
    _all?: true
  }

  export type AvaliacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Avaliacao to aggregate.
     */
    where?: AvaliacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avaliacaos to fetch.
     */
    orderBy?: AvaliacaoOrderByWithRelationInput | AvaliacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AvaliacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avaliacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avaliacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Avaliacaos
    **/
    _count?: true | AvaliacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AvaliacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AvaliacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvaliacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvaliacaoMaxAggregateInputType
  }

  export type GetAvaliacaoAggregateType<T extends AvaliacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateAvaliacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvaliacao[P]>
      : GetScalarType<T[P], AggregateAvaliacao[P]>
  }




  export type AvaliacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AvaliacaoWhereInput
    orderBy?: AvaliacaoOrderByWithAggregationInput | AvaliacaoOrderByWithAggregationInput[]
    by: AvaliacaoScalarFieldEnum[] | AvaliacaoScalarFieldEnum
    having?: AvaliacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvaliacaoCountAggregateInputType | true
    _avg?: AvaliacaoAvgAggregateInputType
    _sum?: AvaliacaoSumAggregateInputType
    _min?: AvaliacaoMinAggregateInputType
    _max?: AvaliacaoMaxAggregateInputType
  }

  export type AvaliacaoGroupByOutputType = {
    id: number
    corridaId: number
    nota: number
    tipo: string
    _count: AvaliacaoCountAggregateOutputType | null
    _avg: AvaliacaoAvgAggregateOutputType | null
    _sum: AvaliacaoSumAggregateOutputType | null
    _min: AvaliacaoMinAggregateOutputType | null
    _max: AvaliacaoMaxAggregateOutputType | null
  }

  type GetAvaliacaoGroupByPayload<T extends AvaliacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AvaliacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvaliacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvaliacaoGroupByOutputType[P]>
            : GetScalarType<T[P], AvaliacaoGroupByOutputType[P]>
        }
      >
    >


  export type AvaliacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    corridaId?: boolean
    nota?: boolean
    tipo?: boolean
    corrida?: boolean | CorridaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["avaliacao"]>

  export type AvaliacaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    corridaId?: boolean
    nota?: boolean
    tipo?: boolean
    corrida?: boolean | CorridaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["avaliacao"]>

  export type AvaliacaoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    corridaId?: boolean
    nota?: boolean
    tipo?: boolean
    corrida?: boolean | CorridaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["avaliacao"]>

  export type AvaliacaoSelectScalar = {
    id?: boolean
    corridaId?: boolean
    nota?: boolean
    tipo?: boolean
  }

  export type AvaliacaoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "corridaId" | "nota" | "tipo", ExtArgs["result"]["avaliacao"]>
  export type AvaliacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corrida?: boolean | CorridaDefaultArgs<ExtArgs>
  }
  export type AvaliacaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corrida?: boolean | CorridaDefaultArgs<ExtArgs>
  }
  export type AvaliacaoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corrida?: boolean | CorridaDefaultArgs<ExtArgs>
  }

  export type $AvaliacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Avaliacao"
    objects: {
      corrida: Prisma.$CorridaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      corridaId: number
      nota: number
      tipo: string
    }, ExtArgs["result"]["avaliacao"]>
    composites: {}
  }

  type AvaliacaoGetPayload<S extends boolean | null | undefined | AvaliacaoDefaultArgs> = $Result.GetResult<Prisma.$AvaliacaoPayload, S>

  type AvaliacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AvaliacaoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AvaliacaoCountAggregateInputType | true
    }

  export interface AvaliacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Avaliacao'], meta: { name: 'Avaliacao' } }
    /**
     * Find zero or one Avaliacao that matches the filter.
     * @param {AvaliacaoFindUniqueArgs} args - Arguments to find a Avaliacao
     * @example
     * // Get one Avaliacao
     * const avaliacao = await prisma.avaliacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AvaliacaoFindUniqueArgs>(args: SelectSubset<T, AvaliacaoFindUniqueArgs<ExtArgs>>): Prisma__AvaliacaoClient<$Result.GetResult<Prisma.$AvaliacaoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Avaliacao that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AvaliacaoFindUniqueOrThrowArgs} args - Arguments to find a Avaliacao
     * @example
     * // Get one Avaliacao
     * const avaliacao = await prisma.avaliacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AvaliacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, AvaliacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AvaliacaoClient<$Result.GetResult<Prisma.$AvaliacaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Avaliacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoFindFirstArgs} args - Arguments to find a Avaliacao
     * @example
     * // Get one Avaliacao
     * const avaliacao = await prisma.avaliacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AvaliacaoFindFirstArgs>(args?: SelectSubset<T, AvaliacaoFindFirstArgs<ExtArgs>>): Prisma__AvaliacaoClient<$Result.GetResult<Prisma.$AvaliacaoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Avaliacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoFindFirstOrThrowArgs} args - Arguments to find a Avaliacao
     * @example
     * // Get one Avaliacao
     * const avaliacao = await prisma.avaliacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AvaliacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, AvaliacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__AvaliacaoClient<$Result.GetResult<Prisma.$AvaliacaoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Avaliacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Avaliacaos
     * const avaliacaos = await prisma.avaliacao.findMany()
     * 
     * // Get first 10 Avaliacaos
     * const avaliacaos = await prisma.avaliacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const avaliacaoWithIdOnly = await prisma.avaliacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AvaliacaoFindManyArgs>(args?: SelectSubset<T, AvaliacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvaliacaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Avaliacao.
     * @param {AvaliacaoCreateArgs} args - Arguments to create a Avaliacao.
     * @example
     * // Create one Avaliacao
     * const Avaliacao = await prisma.avaliacao.create({
     *   data: {
     *     // ... data to create a Avaliacao
     *   }
     * })
     * 
     */
    create<T extends AvaliacaoCreateArgs>(args: SelectSubset<T, AvaliacaoCreateArgs<ExtArgs>>): Prisma__AvaliacaoClient<$Result.GetResult<Prisma.$AvaliacaoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Avaliacaos.
     * @param {AvaliacaoCreateManyArgs} args - Arguments to create many Avaliacaos.
     * @example
     * // Create many Avaliacaos
     * const avaliacao = await prisma.avaliacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AvaliacaoCreateManyArgs>(args?: SelectSubset<T, AvaliacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Avaliacaos and returns the data saved in the database.
     * @param {AvaliacaoCreateManyAndReturnArgs} args - Arguments to create many Avaliacaos.
     * @example
     * // Create many Avaliacaos
     * const avaliacao = await prisma.avaliacao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Avaliacaos and only return the `id`
     * const avaliacaoWithIdOnly = await prisma.avaliacao.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AvaliacaoCreateManyAndReturnArgs>(args?: SelectSubset<T, AvaliacaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvaliacaoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Avaliacao.
     * @param {AvaliacaoDeleteArgs} args - Arguments to delete one Avaliacao.
     * @example
     * // Delete one Avaliacao
     * const Avaliacao = await prisma.avaliacao.delete({
     *   where: {
     *     // ... filter to delete one Avaliacao
     *   }
     * })
     * 
     */
    delete<T extends AvaliacaoDeleteArgs>(args: SelectSubset<T, AvaliacaoDeleteArgs<ExtArgs>>): Prisma__AvaliacaoClient<$Result.GetResult<Prisma.$AvaliacaoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Avaliacao.
     * @param {AvaliacaoUpdateArgs} args - Arguments to update one Avaliacao.
     * @example
     * // Update one Avaliacao
     * const avaliacao = await prisma.avaliacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AvaliacaoUpdateArgs>(args: SelectSubset<T, AvaliacaoUpdateArgs<ExtArgs>>): Prisma__AvaliacaoClient<$Result.GetResult<Prisma.$AvaliacaoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Avaliacaos.
     * @param {AvaliacaoDeleteManyArgs} args - Arguments to filter Avaliacaos to delete.
     * @example
     * // Delete a few Avaliacaos
     * const { count } = await prisma.avaliacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AvaliacaoDeleteManyArgs>(args?: SelectSubset<T, AvaliacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Avaliacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Avaliacaos
     * const avaliacao = await prisma.avaliacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AvaliacaoUpdateManyArgs>(args: SelectSubset<T, AvaliacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Avaliacaos and returns the data updated in the database.
     * @param {AvaliacaoUpdateManyAndReturnArgs} args - Arguments to update many Avaliacaos.
     * @example
     * // Update many Avaliacaos
     * const avaliacao = await prisma.avaliacao.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Avaliacaos and only return the `id`
     * const avaliacaoWithIdOnly = await prisma.avaliacao.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AvaliacaoUpdateManyAndReturnArgs>(args: SelectSubset<T, AvaliacaoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvaliacaoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Avaliacao.
     * @param {AvaliacaoUpsertArgs} args - Arguments to update or create a Avaliacao.
     * @example
     * // Update or create a Avaliacao
     * const avaliacao = await prisma.avaliacao.upsert({
     *   create: {
     *     // ... data to create a Avaliacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Avaliacao we want to update
     *   }
     * })
     */
    upsert<T extends AvaliacaoUpsertArgs>(args: SelectSubset<T, AvaliacaoUpsertArgs<ExtArgs>>): Prisma__AvaliacaoClient<$Result.GetResult<Prisma.$AvaliacaoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Avaliacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoCountArgs} args - Arguments to filter Avaliacaos to count.
     * @example
     * // Count the number of Avaliacaos
     * const count = await prisma.avaliacao.count({
     *   where: {
     *     // ... the filter for the Avaliacaos we want to count
     *   }
     * })
    **/
    count<T extends AvaliacaoCountArgs>(
      args?: Subset<T, AvaliacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvaliacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Avaliacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvaliacaoAggregateArgs>(args: Subset<T, AvaliacaoAggregateArgs>): Prisma.PrismaPromise<GetAvaliacaoAggregateType<T>>

    /**
     * Group by Avaliacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AvaliacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AvaliacaoGroupByArgs['orderBy'] }
        : { orderBy?: AvaliacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AvaliacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvaliacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Avaliacao model
   */
  readonly fields: AvaliacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Avaliacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AvaliacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    corrida<T extends CorridaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CorridaDefaultArgs<ExtArgs>>): Prisma__CorridaClient<$Result.GetResult<Prisma.$CorridaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Avaliacao model
   */
  interface AvaliacaoFieldRefs {
    readonly id: FieldRef<"Avaliacao", 'Int'>
    readonly corridaId: FieldRef<"Avaliacao", 'Int'>
    readonly nota: FieldRef<"Avaliacao", 'Float'>
    readonly tipo: FieldRef<"Avaliacao", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Avaliacao findUnique
   */
  export type AvaliacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avaliacao
     */
    select?: AvaliacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avaliacao
     */
    omit?: AvaliacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvaliacaoInclude<ExtArgs> | null
    /**
     * Filter, which Avaliacao to fetch.
     */
    where: AvaliacaoWhereUniqueInput
  }

  /**
   * Avaliacao findUniqueOrThrow
   */
  export type AvaliacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avaliacao
     */
    select?: AvaliacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avaliacao
     */
    omit?: AvaliacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvaliacaoInclude<ExtArgs> | null
    /**
     * Filter, which Avaliacao to fetch.
     */
    where: AvaliacaoWhereUniqueInput
  }

  /**
   * Avaliacao findFirst
   */
  export type AvaliacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avaliacao
     */
    select?: AvaliacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avaliacao
     */
    omit?: AvaliacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvaliacaoInclude<ExtArgs> | null
    /**
     * Filter, which Avaliacao to fetch.
     */
    where?: AvaliacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avaliacaos to fetch.
     */
    orderBy?: AvaliacaoOrderByWithRelationInput | AvaliacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Avaliacaos.
     */
    cursor?: AvaliacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avaliacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avaliacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Avaliacaos.
     */
    distinct?: AvaliacaoScalarFieldEnum | AvaliacaoScalarFieldEnum[]
  }

  /**
   * Avaliacao findFirstOrThrow
   */
  export type AvaliacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avaliacao
     */
    select?: AvaliacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avaliacao
     */
    omit?: AvaliacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvaliacaoInclude<ExtArgs> | null
    /**
     * Filter, which Avaliacao to fetch.
     */
    where?: AvaliacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avaliacaos to fetch.
     */
    orderBy?: AvaliacaoOrderByWithRelationInput | AvaliacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Avaliacaos.
     */
    cursor?: AvaliacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avaliacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avaliacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Avaliacaos.
     */
    distinct?: AvaliacaoScalarFieldEnum | AvaliacaoScalarFieldEnum[]
  }

  /**
   * Avaliacao findMany
   */
  export type AvaliacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avaliacao
     */
    select?: AvaliacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avaliacao
     */
    omit?: AvaliacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvaliacaoInclude<ExtArgs> | null
    /**
     * Filter, which Avaliacaos to fetch.
     */
    where?: AvaliacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avaliacaos to fetch.
     */
    orderBy?: AvaliacaoOrderByWithRelationInput | AvaliacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Avaliacaos.
     */
    cursor?: AvaliacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avaliacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avaliacaos.
     */
    skip?: number
    distinct?: AvaliacaoScalarFieldEnum | AvaliacaoScalarFieldEnum[]
  }

  /**
   * Avaliacao create
   */
  export type AvaliacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avaliacao
     */
    select?: AvaliacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avaliacao
     */
    omit?: AvaliacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvaliacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Avaliacao.
     */
    data: XOR<AvaliacaoCreateInput, AvaliacaoUncheckedCreateInput>
  }

  /**
   * Avaliacao createMany
   */
  export type AvaliacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Avaliacaos.
     */
    data: AvaliacaoCreateManyInput | AvaliacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Avaliacao createManyAndReturn
   */
  export type AvaliacaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avaliacao
     */
    select?: AvaliacaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Avaliacao
     */
    omit?: AvaliacaoOmit<ExtArgs> | null
    /**
     * The data used to create many Avaliacaos.
     */
    data: AvaliacaoCreateManyInput | AvaliacaoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvaliacaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Avaliacao update
   */
  export type AvaliacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avaliacao
     */
    select?: AvaliacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avaliacao
     */
    omit?: AvaliacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvaliacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Avaliacao.
     */
    data: XOR<AvaliacaoUpdateInput, AvaliacaoUncheckedUpdateInput>
    /**
     * Choose, which Avaliacao to update.
     */
    where: AvaliacaoWhereUniqueInput
  }

  /**
   * Avaliacao updateMany
   */
  export type AvaliacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Avaliacaos.
     */
    data: XOR<AvaliacaoUpdateManyMutationInput, AvaliacaoUncheckedUpdateManyInput>
    /**
     * Filter which Avaliacaos to update
     */
    where?: AvaliacaoWhereInput
    /**
     * Limit how many Avaliacaos to update.
     */
    limit?: number
  }

  /**
   * Avaliacao updateManyAndReturn
   */
  export type AvaliacaoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avaliacao
     */
    select?: AvaliacaoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Avaliacao
     */
    omit?: AvaliacaoOmit<ExtArgs> | null
    /**
     * The data used to update Avaliacaos.
     */
    data: XOR<AvaliacaoUpdateManyMutationInput, AvaliacaoUncheckedUpdateManyInput>
    /**
     * Filter which Avaliacaos to update
     */
    where?: AvaliacaoWhereInput
    /**
     * Limit how many Avaliacaos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvaliacaoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Avaliacao upsert
   */
  export type AvaliacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avaliacao
     */
    select?: AvaliacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avaliacao
     */
    omit?: AvaliacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvaliacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Avaliacao to update in case it exists.
     */
    where: AvaliacaoWhereUniqueInput
    /**
     * In case the Avaliacao found by the `where` argument doesn't exist, create a new Avaliacao with this data.
     */
    create: XOR<AvaliacaoCreateInput, AvaliacaoUncheckedCreateInput>
    /**
     * In case the Avaliacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AvaliacaoUpdateInput, AvaliacaoUncheckedUpdateInput>
  }

  /**
   * Avaliacao delete
   */
  export type AvaliacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avaliacao
     */
    select?: AvaliacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avaliacao
     */
    omit?: AvaliacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvaliacaoInclude<ExtArgs> | null
    /**
     * Filter which Avaliacao to delete.
     */
    where: AvaliacaoWhereUniqueInput
  }

  /**
   * Avaliacao deleteMany
   */
  export type AvaliacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Avaliacaos to delete
     */
    where?: AvaliacaoWhereInput
    /**
     * Limit how many Avaliacaos to delete.
     */
    limit?: number
  }

  /**
   * Avaliacao without action
   */
  export type AvaliacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avaliacao
     */
    select?: AvaliacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Avaliacao
     */
    omit?: AvaliacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvaliacaoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    cpf: 'cpf',
    celular: 'celular',
    codigoIndicacao: 'codigoIndicacao'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const MotoristaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    cnh: 'cnh',
    veiculo: 'veiculo'
  };

  export type MotoristaScalarFieldEnum = (typeof MotoristaScalarFieldEnum)[keyof typeof MotoristaScalarFieldEnum]


  export const CorridaScalarFieldEnum: {
    id: 'id',
    origem: 'origem',
    destino: 'destino',
    formaPagamento: 'formaPagamento',
    valor: 'valor',
    status: 'status',
    dataInicio: 'dataInicio',
    dataFim: 'dataFim',
    passageiroId: 'passageiroId',
    motoristaId: 'motoristaId'
  };

  export type CorridaScalarFieldEnum = (typeof CorridaScalarFieldEnum)[keyof typeof CorridaScalarFieldEnum]


  export const AvaliacaoScalarFieldEnum: {
    id: 'id',
    corridaId: 'corridaId',
    nota: 'nota',
    tipo: 'tipo'
  };

  export type AvaliacaoScalarFieldEnum = (typeof AvaliacaoScalarFieldEnum)[keyof typeof AvaliacaoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nome?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    cpf?: StringFilter<"Usuario"> | string
    celular?: StringFilter<"Usuario"> | string
    codigoIndicacao?: StringNullableFilter<"Usuario"> | string | null
    corridas?: CorridaListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    codigoIndicacao?: SortOrderInput | SortOrder
    corridas?: CorridaOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    cpf?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    celular?: StringFilter<"Usuario"> | string
    codigoIndicacao?: StringNullableFilter<"Usuario"> | string | null
    corridas?: CorridaListRelationFilter
  }, "id" | "email" | "cpf">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    codigoIndicacao?: SortOrderInput | SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
    cpf?: StringWithAggregatesFilter<"Usuario"> | string
    celular?: StringWithAggregatesFilter<"Usuario"> | string
    codigoIndicacao?: StringNullableWithAggregatesFilter<"Usuario"> | string | null
  }

  export type MotoristaWhereInput = {
    AND?: MotoristaWhereInput | MotoristaWhereInput[]
    OR?: MotoristaWhereInput[]
    NOT?: MotoristaWhereInput | MotoristaWhereInput[]
    id?: IntFilter<"Motorista"> | number
    nome?: StringFilter<"Motorista"> | string
    email?: StringFilter<"Motorista"> | string
    senha?: StringFilter<"Motorista"> | string
    cnh?: StringFilter<"Motorista"> | string
    veiculo?: StringFilter<"Motorista"> | string
    corridas?: CorridaListRelationFilter
  }

  export type MotoristaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cnh?: SortOrder
    veiculo?: SortOrder
    corridas?: CorridaOrderByRelationAggregateInput
  }

  export type MotoristaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: MotoristaWhereInput | MotoristaWhereInput[]
    OR?: MotoristaWhereInput[]
    NOT?: MotoristaWhereInput | MotoristaWhereInput[]
    nome?: StringFilter<"Motorista"> | string
    senha?: StringFilter<"Motorista"> | string
    cnh?: StringFilter<"Motorista"> | string
    veiculo?: StringFilter<"Motorista"> | string
    corridas?: CorridaListRelationFilter
  }, "id" | "email">

  export type MotoristaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cnh?: SortOrder
    veiculo?: SortOrder
    _count?: MotoristaCountOrderByAggregateInput
    _avg?: MotoristaAvgOrderByAggregateInput
    _max?: MotoristaMaxOrderByAggregateInput
    _min?: MotoristaMinOrderByAggregateInput
    _sum?: MotoristaSumOrderByAggregateInput
  }

  export type MotoristaScalarWhereWithAggregatesInput = {
    AND?: MotoristaScalarWhereWithAggregatesInput | MotoristaScalarWhereWithAggregatesInput[]
    OR?: MotoristaScalarWhereWithAggregatesInput[]
    NOT?: MotoristaScalarWhereWithAggregatesInput | MotoristaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Motorista"> | number
    nome?: StringWithAggregatesFilter<"Motorista"> | string
    email?: StringWithAggregatesFilter<"Motorista"> | string
    senha?: StringWithAggregatesFilter<"Motorista"> | string
    cnh?: StringWithAggregatesFilter<"Motorista"> | string
    veiculo?: StringWithAggregatesFilter<"Motorista"> | string
  }

  export type CorridaWhereInput = {
    AND?: CorridaWhereInput | CorridaWhereInput[]
    OR?: CorridaWhereInput[]
    NOT?: CorridaWhereInput | CorridaWhereInput[]
    id?: IntFilter<"Corrida"> | number
    origem?: StringFilter<"Corrida"> | string
    destino?: StringFilter<"Corrida"> | string
    formaPagamento?: StringFilter<"Corrida"> | string
    valor?: FloatFilter<"Corrida"> | number
    status?: StringFilter<"Corrida"> | string
    dataInicio?: DateTimeFilter<"Corrida"> | Date | string
    dataFim?: DateTimeNullableFilter<"Corrida"> | Date | string | null
    passageiroId?: IntFilter<"Corrida"> | number
    motoristaId?: IntNullableFilter<"Corrida"> | number | null
    passageiro?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    motorista?: XOR<MotoristaNullableScalarRelationFilter, MotoristaWhereInput> | null
    avaliacao?: XOR<AvaliacaoNullableScalarRelationFilter, AvaliacaoWhereInput> | null
  }

  export type CorridaOrderByWithRelationInput = {
    id?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    formaPagamento?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrderInput | SortOrder
    passageiroId?: SortOrder
    motoristaId?: SortOrderInput | SortOrder
    passageiro?: UsuarioOrderByWithRelationInput
    motorista?: MotoristaOrderByWithRelationInput
    avaliacao?: AvaliacaoOrderByWithRelationInput
  }

  export type CorridaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CorridaWhereInput | CorridaWhereInput[]
    OR?: CorridaWhereInput[]
    NOT?: CorridaWhereInput | CorridaWhereInput[]
    origem?: StringFilter<"Corrida"> | string
    destino?: StringFilter<"Corrida"> | string
    formaPagamento?: StringFilter<"Corrida"> | string
    valor?: FloatFilter<"Corrida"> | number
    status?: StringFilter<"Corrida"> | string
    dataInicio?: DateTimeFilter<"Corrida"> | Date | string
    dataFim?: DateTimeNullableFilter<"Corrida"> | Date | string | null
    passageiroId?: IntFilter<"Corrida"> | number
    motoristaId?: IntNullableFilter<"Corrida"> | number | null
    passageiro?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    motorista?: XOR<MotoristaNullableScalarRelationFilter, MotoristaWhereInput> | null
    avaliacao?: XOR<AvaliacaoNullableScalarRelationFilter, AvaliacaoWhereInput> | null
  }, "id">

  export type CorridaOrderByWithAggregationInput = {
    id?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    formaPagamento?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrderInput | SortOrder
    passageiroId?: SortOrder
    motoristaId?: SortOrderInput | SortOrder
    _count?: CorridaCountOrderByAggregateInput
    _avg?: CorridaAvgOrderByAggregateInput
    _max?: CorridaMaxOrderByAggregateInput
    _min?: CorridaMinOrderByAggregateInput
    _sum?: CorridaSumOrderByAggregateInput
  }

  export type CorridaScalarWhereWithAggregatesInput = {
    AND?: CorridaScalarWhereWithAggregatesInput | CorridaScalarWhereWithAggregatesInput[]
    OR?: CorridaScalarWhereWithAggregatesInput[]
    NOT?: CorridaScalarWhereWithAggregatesInput | CorridaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Corrida"> | number
    origem?: StringWithAggregatesFilter<"Corrida"> | string
    destino?: StringWithAggregatesFilter<"Corrida"> | string
    formaPagamento?: StringWithAggregatesFilter<"Corrida"> | string
    valor?: FloatWithAggregatesFilter<"Corrida"> | number
    status?: StringWithAggregatesFilter<"Corrida"> | string
    dataInicio?: DateTimeWithAggregatesFilter<"Corrida"> | Date | string
    dataFim?: DateTimeNullableWithAggregatesFilter<"Corrida"> | Date | string | null
    passageiroId?: IntWithAggregatesFilter<"Corrida"> | number
    motoristaId?: IntNullableWithAggregatesFilter<"Corrida"> | number | null
  }

  export type AvaliacaoWhereInput = {
    AND?: AvaliacaoWhereInput | AvaliacaoWhereInput[]
    OR?: AvaliacaoWhereInput[]
    NOT?: AvaliacaoWhereInput | AvaliacaoWhereInput[]
    id?: IntFilter<"Avaliacao"> | number
    corridaId?: IntFilter<"Avaliacao"> | number
    nota?: FloatFilter<"Avaliacao"> | number
    tipo?: StringFilter<"Avaliacao"> | string
    corrida?: XOR<CorridaScalarRelationFilter, CorridaWhereInput>
  }

  export type AvaliacaoOrderByWithRelationInput = {
    id?: SortOrder
    corridaId?: SortOrder
    nota?: SortOrder
    tipo?: SortOrder
    corrida?: CorridaOrderByWithRelationInput
  }

  export type AvaliacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    corridaId?: number
    AND?: AvaliacaoWhereInput | AvaliacaoWhereInput[]
    OR?: AvaliacaoWhereInput[]
    NOT?: AvaliacaoWhereInput | AvaliacaoWhereInput[]
    nota?: FloatFilter<"Avaliacao"> | number
    tipo?: StringFilter<"Avaliacao"> | string
    corrida?: XOR<CorridaScalarRelationFilter, CorridaWhereInput>
  }, "id" | "corridaId">

  export type AvaliacaoOrderByWithAggregationInput = {
    id?: SortOrder
    corridaId?: SortOrder
    nota?: SortOrder
    tipo?: SortOrder
    _count?: AvaliacaoCountOrderByAggregateInput
    _avg?: AvaliacaoAvgOrderByAggregateInput
    _max?: AvaliacaoMaxOrderByAggregateInput
    _min?: AvaliacaoMinOrderByAggregateInput
    _sum?: AvaliacaoSumOrderByAggregateInput
  }

  export type AvaliacaoScalarWhereWithAggregatesInput = {
    AND?: AvaliacaoScalarWhereWithAggregatesInput | AvaliacaoScalarWhereWithAggregatesInput[]
    OR?: AvaliacaoScalarWhereWithAggregatesInput[]
    NOT?: AvaliacaoScalarWhereWithAggregatesInput | AvaliacaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Avaliacao"> | number
    corridaId?: IntWithAggregatesFilter<"Avaliacao"> | number
    nota?: FloatWithAggregatesFilter<"Avaliacao"> | number
    tipo?: StringWithAggregatesFilter<"Avaliacao"> | string
  }

  export type UsuarioCreateInput = {
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    codigoIndicacao?: string | null
    corridas?: CorridaCreateNestedManyWithoutPassageiroInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    codigoIndicacao?: string | null
    corridas?: CorridaUncheckedCreateNestedManyWithoutPassageiroInput
  }

  export type UsuarioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    codigoIndicacao?: NullableStringFieldUpdateOperationsInput | string | null
    corridas?: CorridaUpdateManyWithoutPassageiroNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    codigoIndicacao?: NullableStringFieldUpdateOperationsInput | string | null
    corridas?: CorridaUncheckedUpdateManyWithoutPassageiroNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    codigoIndicacao?: string | null
  }

  export type UsuarioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    codigoIndicacao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    codigoIndicacao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MotoristaCreateInput = {
    nome: string
    email: string
    senha: string
    cnh: string
    veiculo: string
    corridas?: CorridaCreateNestedManyWithoutMotoristaInput
  }

  export type MotoristaUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    cnh: string
    veiculo: string
    corridas?: CorridaUncheckedCreateNestedManyWithoutMotoristaInput
  }

  export type MotoristaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cnh?: StringFieldUpdateOperationsInput | string
    veiculo?: StringFieldUpdateOperationsInput | string
    corridas?: CorridaUpdateManyWithoutMotoristaNestedInput
  }

  export type MotoristaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cnh?: StringFieldUpdateOperationsInput | string
    veiculo?: StringFieldUpdateOperationsInput | string
    corridas?: CorridaUncheckedUpdateManyWithoutMotoristaNestedInput
  }

  export type MotoristaCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
    cnh: string
    veiculo: string
  }

  export type MotoristaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cnh?: StringFieldUpdateOperationsInput | string
    veiculo?: StringFieldUpdateOperationsInput | string
  }

  export type MotoristaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cnh?: StringFieldUpdateOperationsInput | string
    veiculo?: StringFieldUpdateOperationsInput | string
  }

  export type CorridaCreateInput = {
    origem: string
    destino: string
    formaPagamento: string
    valor: number
    status: string
    dataInicio?: Date | string
    dataFim?: Date | string | null
    passageiro: UsuarioCreateNestedOneWithoutCorridasInput
    motorista?: MotoristaCreateNestedOneWithoutCorridasInput
    avaliacao?: AvaliacaoCreateNestedOneWithoutCorridaInput
  }

  export type CorridaUncheckedCreateInput = {
    id?: number
    origem: string
    destino: string
    formaPagamento: string
    valor: number
    status: string
    dataInicio?: Date | string
    dataFim?: Date | string | null
    passageiroId: number
    motoristaId?: number | null
    avaliacao?: AvaliacaoUncheckedCreateNestedOneWithoutCorridaInput
  }

  export type CorridaUpdateInput = {
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passageiro?: UsuarioUpdateOneRequiredWithoutCorridasNestedInput
    motorista?: MotoristaUpdateOneWithoutCorridasNestedInput
    avaliacao?: AvaliacaoUpdateOneWithoutCorridaNestedInput
  }

  export type CorridaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passageiroId?: IntFieldUpdateOperationsInput | number
    motoristaId?: NullableIntFieldUpdateOperationsInput | number | null
    avaliacao?: AvaliacaoUncheckedUpdateOneWithoutCorridaNestedInput
  }

  export type CorridaCreateManyInput = {
    id?: number
    origem: string
    destino: string
    formaPagamento: string
    valor: number
    status: string
    dataInicio?: Date | string
    dataFim?: Date | string | null
    passageiroId: number
    motoristaId?: number | null
  }

  export type CorridaUpdateManyMutationInput = {
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CorridaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passageiroId?: IntFieldUpdateOperationsInput | number
    motoristaId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AvaliacaoCreateInput = {
    nota: number
    tipo: string
    corrida: CorridaCreateNestedOneWithoutAvaliacaoInput
  }

  export type AvaliacaoUncheckedCreateInput = {
    id?: number
    corridaId: number
    nota: number
    tipo: string
  }

  export type AvaliacaoUpdateInput = {
    nota?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    corrida?: CorridaUpdateOneRequiredWithoutAvaliacaoNestedInput
  }

  export type AvaliacaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    corridaId?: IntFieldUpdateOperationsInput | number
    nota?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
  }

  export type AvaliacaoCreateManyInput = {
    id?: number
    corridaId: number
    nota: number
    tipo: string
  }

  export type AvaliacaoUpdateManyMutationInput = {
    nota?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
  }

  export type AvaliacaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    corridaId?: IntFieldUpdateOperationsInput | number
    nota?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CorridaListRelationFilter = {
    every?: CorridaWhereInput
    some?: CorridaWhereInput
    none?: CorridaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CorridaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    codigoIndicacao?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    codigoIndicacao?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    codigoIndicacao?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type MotoristaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cnh?: SortOrder
    veiculo?: SortOrder
  }

  export type MotoristaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MotoristaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cnh?: SortOrder
    veiculo?: SortOrder
  }

  export type MotoristaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cnh?: SortOrder
    veiculo?: SortOrder
  }

  export type MotoristaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type MotoristaNullableScalarRelationFilter = {
    is?: MotoristaWhereInput | null
    isNot?: MotoristaWhereInput | null
  }

  export type AvaliacaoNullableScalarRelationFilter = {
    is?: AvaliacaoWhereInput | null
    isNot?: AvaliacaoWhereInput | null
  }

  export type CorridaCountOrderByAggregateInput = {
    id?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    formaPagamento?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    passageiroId?: SortOrder
    motoristaId?: SortOrder
  }

  export type CorridaAvgOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    passageiroId?: SortOrder
    motoristaId?: SortOrder
  }

  export type CorridaMaxOrderByAggregateInput = {
    id?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    formaPagamento?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    passageiroId?: SortOrder
    motoristaId?: SortOrder
  }

  export type CorridaMinOrderByAggregateInput = {
    id?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    formaPagamento?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    passageiroId?: SortOrder
    motoristaId?: SortOrder
  }

  export type CorridaSumOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    passageiroId?: SortOrder
    motoristaId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CorridaScalarRelationFilter = {
    is?: CorridaWhereInput
    isNot?: CorridaWhereInput
  }

  export type AvaliacaoCountOrderByAggregateInput = {
    id?: SortOrder
    corridaId?: SortOrder
    nota?: SortOrder
    tipo?: SortOrder
  }

  export type AvaliacaoAvgOrderByAggregateInput = {
    id?: SortOrder
    corridaId?: SortOrder
    nota?: SortOrder
  }

  export type AvaliacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    corridaId?: SortOrder
    nota?: SortOrder
    tipo?: SortOrder
  }

  export type AvaliacaoMinOrderByAggregateInput = {
    id?: SortOrder
    corridaId?: SortOrder
    nota?: SortOrder
    tipo?: SortOrder
  }

  export type AvaliacaoSumOrderByAggregateInput = {
    id?: SortOrder
    corridaId?: SortOrder
    nota?: SortOrder
  }

  export type CorridaCreateNestedManyWithoutPassageiroInput = {
    create?: XOR<CorridaCreateWithoutPassageiroInput, CorridaUncheckedCreateWithoutPassageiroInput> | CorridaCreateWithoutPassageiroInput[] | CorridaUncheckedCreateWithoutPassageiroInput[]
    connectOrCreate?: CorridaCreateOrConnectWithoutPassageiroInput | CorridaCreateOrConnectWithoutPassageiroInput[]
    createMany?: CorridaCreateManyPassageiroInputEnvelope
    connect?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
  }

  export type CorridaUncheckedCreateNestedManyWithoutPassageiroInput = {
    create?: XOR<CorridaCreateWithoutPassageiroInput, CorridaUncheckedCreateWithoutPassageiroInput> | CorridaCreateWithoutPassageiroInput[] | CorridaUncheckedCreateWithoutPassageiroInput[]
    connectOrCreate?: CorridaCreateOrConnectWithoutPassageiroInput | CorridaCreateOrConnectWithoutPassageiroInput[]
    createMany?: CorridaCreateManyPassageiroInputEnvelope
    connect?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CorridaUpdateManyWithoutPassageiroNestedInput = {
    create?: XOR<CorridaCreateWithoutPassageiroInput, CorridaUncheckedCreateWithoutPassageiroInput> | CorridaCreateWithoutPassageiroInput[] | CorridaUncheckedCreateWithoutPassageiroInput[]
    connectOrCreate?: CorridaCreateOrConnectWithoutPassageiroInput | CorridaCreateOrConnectWithoutPassageiroInput[]
    upsert?: CorridaUpsertWithWhereUniqueWithoutPassageiroInput | CorridaUpsertWithWhereUniqueWithoutPassageiroInput[]
    createMany?: CorridaCreateManyPassageiroInputEnvelope
    set?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    disconnect?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    delete?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    connect?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    update?: CorridaUpdateWithWhereUniqueWithoutPassageiroInput | CorridaUpdateWithWhereUniqueWithoutPassageiroInput[]
    updateMany?: CorridaUpdateManyWithWhereWithoutPassageiroInput | CorridaUpdateManyWithWhereWithoutPassageiroInput[]
    deleteMany?: CorridaScalarWhereInput | CorridaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CorridaUncheckedUpdateManyWithoutPassageiroNestedInput = {
    create?: XOR<CorridaCreateWithoutPassageiroInput, CorridaUncheckedCreateWithoutPassageiroInput> | CorridaCreateWithoutPassageiroInput[] | CorridaUncheckedCreateWithoutPassageiroInput[]
    connectOrCreate?: CorridaCreateOrConnectWithoutPassageiroInput | CorridaCreateOrConnectWithoutPassageiroInput[]
    upsert?: CorridaUpsertWithWhereUniqueWithoutPassageiroInput | CorridaUpsertWithWhereUniqueWithoutPassageiroInput[]
    createMany?: CorridaCreateManyPassageiroInputEnvelope
    set?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    disconnect?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    delete?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    connect?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    update?: CorridaUpdateWithWhereUniqueWithoutPassageiroInput | CorridaUpdateWithWhereUniqueWithoutPassageiroInput[]
    updateMany?: CorridaUpdateManyWithWhereWithoutPassageiroInput | CorridaUpdateManyWithWhereWithoutPassageiroInput[]
    deleteMany?: CorridaScalarWhereInput | CorridaScalarWhereInput[]
  }

  export type CorridaCreateNestedManyWithoutMotoristaInput = {
    create?: XOR<CorridaCreateWithoutMotoristaInput, CorridaUncheckedCreateWithoutMotoristaInput> | CorridaCreateWithoutMotoristaInput[] | CorridaUncheckedCreateWithoutMotoristaInput[]
    connectOrCreate?: CorridaCreateOrConnectWithoutMotoristaInput | CorridaCreateOrConnectWithoutMotoristaInput[]
    createMany?: CorridaCreateManyMotoristaInputEnvelope
    connect?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
  }

  export type CorridaUncheckedCreateNestedManyWithoutMotoristaInput = {
    create?: XOR<CorridaCreateWithoutMotoristaInput, CorridaUncheckedCreateWithoutMotoristaInput> | CorridaCreateWithoutMotoristaInput[] | CorridaUncheckedCreateWithoutMotoristaInput[]
    connectOrCreate?: CorridaCreateOrConnectWithoutMotoristaInput | CorridaCreateOrConnectWithoutMotoristaInput[]
    createMany?: CorridaCreateManyMotoristaInputEnvelope
    connect?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
  }

  export type CorridaUpdateManyWithoutMotoristaNestedInput = {
    create?: XOR<CorridaCreateWithoutMotoristaInput, CorridaUncheckedCreateWithoutMotoristaInput> | CorridaCreateWithoutMotoristaInput[] | CorridaUncheckedCreateWithoutMotoristaInput[]
    connectOrCreate?: CorridaCreateOrConnectWithoutMotoristaInput | CorridaCreateOrConnectWithoutMotoristaInput[]
    upsert?: CorridaUpsertWithWhereUniqueWithoutMotoristaInput | CorridaUpsertWithWhereUniqueWithoutMotoristaInput[]
    createMany?: CorridaCreateManyMotoristaInputEnvelope
    set?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    disconnect?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    delete?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    connect?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    update?: CorridaUpdateWithWhereUniqueWithoutMotoristaInput | CorridaUpdateWithWhereUniqueWithoutMotoristaInput[]
    updateMany?: CorridaUpdateManyWithWhereWithoutMotoristaInput | CorridaUpdateManyWithWhereWithoutMotoristaInput[]
    deleteMany?: CorridaScalarWhereInput | CorridaScalarWhereInput[]
  }

  export type CorridaUncheckedUpdateManyWithoutMotoristaNestedInput = {
    create?: XOR<CorridaCreateWithoutMotoristaInput, CorridaUncheckedCreateWithoutMotoristaInput> | CorridaCreateWithoutMotoristaInput[] | CorridaUncheckedCreateWithoutMotoristaInput[]
    connectOrCreate?: CorridaCreateOrConnectWithoutMotoristaInput | CorridaCreateOrConnectWithoutMotoristaInput[]
    upsert?: CorridaUpsertWithWhereUniqueWithoutMotoristaInput | CorridaUpsertWithWhereUniqueWithoutMotoristaInput[]
    createMany?: CorridaCreateManyMotoristaInputEnvelope
    set?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    disconnect?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    delete?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    connect?: CorridaWhereUniqueInput | CorridaWhereUniqueInput[]
    update?: CorridaUpdateWithWhereUniqueWithoutMotoristaInput | CorridaUpdateWithWhereUniqueWithoutMotoristaInput[]
    updateMany?: CorridaUpdateManyWithWhereWithoutMotoristaInput | CorridaUpdateManyWithWhereWithoutMotoristaInput[]
    deleteMany?: CorridaScalarWhereInput | CorridaScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutCorridasInput = {
    create?: XOR<UsuarioCreateWithoutCorridasInput, UsuarioUncheckedCreateWithoutCorridasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCorridasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type MotoristaCreateNestedOneWithoutCorridasInput = {
    create?: XOR<MotoristaCreateWithoutCorridasInput, MotoristaUncheckedCreateWithoutCorridasInput>
    connectOrCreate?: MotoristaCreateOrConnectWithoutCorridasInput
    connect?: MotoristaWhereUniqueInput
  }

  export type AvaliacaoCreateNestedOneWithoutCorridaInput = {
    create?: XOR<AvaliacaoCreateWithoutCorridaInput, AvaliacaoUncheckedCreateWithoutCorridaInput>
    connectOrCreate?: AvaliacaoCreateOrConnectWithoutCorridaInput
    connect?: AvaliacaoWhereUniqueInput
  }

  export type AvaliacaoUncheckedCreateNestedOneWithoutCorridaInput = {
    create?: XOR<AvaliacaoCreateWithoutCorridaInput, AvaliacaoUncheckedCreateWithoutCorridaInput>
    connectOrCreate?: AvaliacaoCreateOrConnectWithoutCorridaInput
    connect?: AvaliacaoWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UsuarioUpdateOneRequiredWithoutCorridasNestedInput = {
    create?: XOR<UsuarioCreateWithoutCorridasInput, UsuarioUncheckedCreateWithoutCorridasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCorridasInput
    upsert?: UsuarioUpsertWithoutCorridasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutCorridasInput, UsuarioUpdateWithoutCorridasInput>, UsuarioUncheckedUpdateWithoutCorridasInput>
  }

  export type MotoristaUpdateOneWithoutCorridasNestedInput = {
    create?: XOR<MotoristaCreateWithoutCorridasInput, MotoristaUncheckedCreateWithoutCorridasInput>
    connectOrCreate?: MotoristaCreateOrConnectWithoutCorridasInput
    upsert?: MotoristaUpsertWithoutCorridasInput
    disconnect?: MotoristaWhereInput | boolean
    delete?: MotoristaWhereInput | boolean
    connect?: MotoristaWhereUniqueInput
    update?: XOR<XOR<MotoristaUpdateToOneWithWhereWithoutCorridasInput, MotoristaUpdateWithoutCorridasInput>, MotoristaUncheckedUpdateWithoutCorridasInput>
  }

  export type AvaliacaoUpdateOneWithoutCorridaNestedInput = {
    create?: XOR<AvaliacaoCreateWithoutCorridaInput, AvaliacaoUncheckedCreateWithoutCorridaInput>
    connectOrCreate?: AvaliacaoCreateOrConnectWithoutCorridaInput
    upsert?: AvaliacaoUpsertWithoutCorridaInput
    disconnect?: AvaliacaoWhereInput | boolean
    delete?: AvaliacaoWhereInput | boolean
    connect?: AvaliacaoWhereUniqueInput
    update?: XOR<XOR<AvaliacaoUpdateToOneWithWhereWithoutCorridaInput, AvaliacaoUpdateWithoutCorridaInput>, AvaliacaoUncheckedUpdateWithoutCorridaInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AvaliacaoUncheckedUpdateOneWithoutCorridaNestedInput = {
    create?: XOR<AvaliacaoCreateWithoutCorridaInput, AvaliacaoUncheckedCreateWithoutCorridaInput>
    connectOrCreate?: AvaliacaoCreateOrConnectWithoutCorridaInput
    upsert?: AvaliacaoUpsertWithoutCorridaInput
    disconnect?: AvaliacaoWhereInput | boolean
    delete?: AvaliacaoWhereInput | boolean
    connect?: AvaliacaoWhereUniqueInput
    update?: XOR<XOR<AvaliacaoUpdateToOneWithWhereWithoutCorridaInput, AvaliacaoUpdateWithoutCorridaInput>, AvaliacaoUncheckedUpdateWithoutCorridaInput>
  }

  export type CorridaCreateNestedOneWithoutAvaliacaoInput = {
    create?: XOR<CorridaCreateWithoutAvaliacaoInput, CorridaUncheckedCreateWithoutAvaliacaoInput>
    connectOrCreate?: CorridaCreateOrConnectWithoutAvaliacaoInput
    connect?: CorridaWhereUniqueInput
  }

  export type CorridaUpdateOneRequiredWithoutAvaliacaoNestedInput = {
    create?: XOR<CorridaCreateWithoutAvaliacaoInput, CorridaUncheckedCreateWithoutAvaliacaoInput>
    connectOrCreate?: CorridaCreateOrConnectWithoutAvaliacaoInput
    upsert?: CorridaUpsertWithoutAvaliacaoInput
    connect?: CorridaWhereUniqueInput
    update?: XOR<XOR<CorridaUpdateToOneWithWhereWithoutAvaliacaoInput, CorridaUpdateWithoutAvaliacaoInput>, CorridaUncheckedUpdateWithoutAvaliacaoInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CorridaCreateWithoutPassageiroInput = {
    origem: string
    destino: string
    formaPagamento: string
    valor: number
    status: string
    dataInicio?: Date | string
    dataFim?: Date | string | null
    motorista?: MotoristaCreateNestedOneWithoutCorridasInput
    avaliacao?: AvaliacaoCreateNestedOneWithoutCorridaInput
  }

  export type CorridaUncheckedCreateWithoutPassageiroInput = {
    id?: number
    origem: string
    destino: string
    formaPagamento: string
    valor: number
    status: string
    dataInicio?: Date | string
    dataFim?: Date | string | null
    motoristaId?: number | null
    avaliacao?: AvaliacaoUncheckedCreateNestedOneWithoutCorridaInput
  }

  export type CorridaCreateOrConnectWithoutPassageiroInput = {
    where: CorridaWhereUniqueInput
    create: XOR<CorridaCreateWithoutPassageiroInput, CorridaUncheckedCreateWithoutPassageiroInput>
  }

  export type CorridaCreateManyPassageiroInputEnvelope = {
    data: CorridaCreateManyPassageiroInput | CorridaCreateManyPassageiroInput[]
    skipDuplicates?: boolean
  }

  export type CorridaUpsertWithWhereUniqueWithoutPassageiroInput = {
    where: CorridaWhereUniqueInput
    update: XOR<CorridaUpdateWithoutPassageiroInput, CorridaUncheckedUpdateWithoutPassageiroInput>
    create: XOR<CorridaCreateWithoutPassageiroInput, CorridaUncheckedCreateWithoutPassageiroInput>
  }

  export type CorridaUpdateWithWhereUniqueWithoutPassageiroInput = {
    where: CorridaWhereUniqueInput
    data: XOR<CorridaUpdateWithoutPassageiroInput, CorridaUncheckedUpdateWithoutPassageiroInput>
  }

  export type CorridaUpdateManyWithWhereWithoutPassageiroInput = {
    where: CorridaScalarWhereInput
    data: XOR<CorridaUpdateManyMutationInput, CorridaUncheckedUpdateManyWithoutPassageiroInput>
  }

  export type CorridaScalarWhereInput = {
    AND?: CorridaScalarWhereInput | CorridaScalarWhereInput[]
    OR?: CorridaScalarWhereInput[]
    NOT?: CorridaScalarWhereInput | CorridaScalarWhereInput[]
    id?: IntFilter<"Corrida"> | number
    origem?: StringFilter<"Corrida"> | string
    destino?: StringFilter<"Corrida"> | string
    formaPagamento?: StringFilter<"Corrida"> | string
    valor?: FloatFilter<"Corrida"> | number
    status?: StringFilter<"Corrida"> | string
    dataInicio?: DateTimeFilter<"Corrida"> | Date | string
    dataFim?: DateTimeNullableFilter<"Corrida"> | Date | string | null
    passageiroId?: IntFilter<"Corrida"> | number
    motoristaId?: IntNullableFilter<"Corrida"> | number | null
  }

  export type CorridaCreateWithoutMotoristaInput = {
    origem: string
    destino: string
    formaPagamento: string
    valor: number
    status: string
    dataInicio?: Date | string
    dataFim?: Date | string | null
    passageiro: UsuarioCreateNestedOneWithoutCorridasInput
    avaliacao?: AvaliacaoCreateNestedOneWithoutCorridaInput
  }

  export type CorridaUncheckedCreateWithoutMotoristaInput = {
    id?: number
    origem: string
    destino: string
    formaPagamento: string
    valor: number
    status: string
    dataInicio?: Date | string
    dataFim?: Date | string | null
    passageiroId: number
    avaliacao?: AvaliacaoUncheckedCreateNestedOneWithoutCorridaInput
  }

  export type CorridaCreateOrConnectWithoutMotoristaInput = {
    where: CorridaWhereUniqueInput
    create: XOR<CorridaCreateWithoutMotoristaInput, CorridaUncheckedCreateWithoutMotoristaInput>
  }

  export type CorridaCreateManyMotoristaInputEnvelope = {
    data: CorridaCreateManyMotoristaInput | CorridaCreateManyMotoristaInput[]
    skipDuplicates?: boolean
  }

  export type CorridaUpsertWithWhereUniqueWithoutMotoristaInput = {
    where: CorridaWhereUniqueInput
    update: XOR<CorridaUpdateWithoutMotoristaInput, CorridaUncheckedUpdateWithoutMotoristaInput>
    create: XOR<CorridaCreateWithoutMotoristaInput, CorridaUncheckedCreateWithoutMotoristaInput>
  }

  export type CorridaUpdateWithWhereUniqueWithoutMotoristaInput = {
    where: CorridaWhereUniqueInput
    data: XOR<CorridaUpdateWithoutMotoristaInput, CorridaUncheckedUpdateWithoutMotoristaInput>
  }

  export type CorridaUpdateManyWithWhereWithoutMotoristaInput = {
    where: CorridaScalarWhereInput
    data: XOR<CorridaUpdateManyMutationInput, CorridaUncheckedUpdateManyWithoutMotoristaInput>
  }

  export type UsuarioCreateWithoutCorridasInput = {
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    codigoIndicacao?: string | null
  }

  export type UsuarioUncheckedCreateWithoutCorridasInput = {
    id?: number
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    codigoIndicacao?: string | null
  }

  export type UsuarioCreateOrConnectWithoutCorridasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutCorridasInput, UsuarioUncheckedCreateWithoutCorridasInput>
  }

  export type MotoristaCreateWithoutCorridasInput = {
    nome: string
    email: string
    senha: string
    cnh: string
    veiculo: string
  }

  export type MotoristaUncheckedCreateWithoutCorridasInput = {
    id?: number
    nome: string
    email: string
    senha: string
    cnh: string
    veiculo: string
  }

  export type MotoristaCreateOrConnectWithoutCorridasInput = {
    where: MotoristaWhereUniqueInput
    create: XOR<MotoristaCreateWithoutCorridasInput, MotoristaUncheckedCreateWithoutCorridasInput>
  }

  export type AvaliacaoCreateWithoutCorridaInput = {
    nota: number
    tipo: string
  }

  export type AvaliacaoUncheckedCreateWithoutCorridaInput = {
    id?: number
    nota: number
    tipo: string
  }

  export type AvaliacaoCreateOrConnectWithoutCorridaInput = {
    where: AvaliacaoWhereUniqueInput
    create: XOR<AvaliacaoCreateWithoutCorridaInput, AvaliacaoUncheckedCreateWithoutCorridaInput>
  }

  export type UsuarioUpsertWithoutCorridasInput = {
    update: XOR<UsuarioUpdateWithoutCorridasInput, UsuarioUncheckedUpdateWithoutCorridasInput>
    create: XOR<UsuarioCreateWithoutCorridasInput, UsuarioUncheckedCreateWithoutCorridasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutCorridasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutCorridasInput, UsuarioUncheckedUpdateWithoutCorridasInput>
  }

  export type UsuarioUpdateWithoutCorridasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    codigoIndicacao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsuarioUncheckedUpdateWithoutCorridasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    codigoIndicacao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MotoristaUpsertWithoutCorridasInput = {
    update: XOR<MotoristaUpdateWithoutCorridasInput, MotoristaUncheckedUpdateWithoutCorridasInput>
    create: XOR<MotoristaCreateWithoutCorridasInput, MotoristaUncheckedCreateWithoutCorridasInput>
    where?: MotoristaWhereInput
  }

  export type MotoristaUpdateToOneWithWhereWithoutCorridasInput = {
    where?: MotoristaWhereInput
    data: XOR<MotoristaUpdateWithoutCorridasInput, MotoristaUncheckedUpdateWithoutCorridasInput>
  }

  export type MotoristaUpdateWithoutCorridasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cnh?: StringFieldUpdateOperationsInput | string
    veiculo?: StringFieldUpdateOperationsInput | string
  }

  export type MotoristaUncheckedUpdateWithoutCorridasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cnh?: StringFieldUpdateOperationsInput | string
    veiculo?: StringFieldUpdateOperationsInput | string
  }

  export type AvaliacaoUpsertWithoutCorridaInput = {
    update: XOR<AvaliacaoUpdateWithoutCorridaInput, AvaliacaoUncheckedUpdateWithoutCorridaInput>
    create: XOR<AvaliacaoCreateWithoutCorridaInput, AvaliacaoUncheckedCreateWithoutCorridaInput>
    where?: AvaliacaoWhereInput
  }

  export type AvaliacaoUpdateToOneWithWhereWithoutCorridaInput = {
    where?: AvaliacaoWhereInput
    data: XOR<AvaliacaoUpdateWithoutCorridaInput, AvaliacaoUncheckedUpdateWithoutCorridaInput>
  }

  export type AvaliacaoUpdateWithoutCorridaInput = {
    nota?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
  }

  export type AvaliacaoUncheckedUpdateWithoutCorridaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nota?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
  }

  export type CorridaCreateWithoutAvaliacaoInput = {
    origem: string
    destino: string
    formaPagamento: string
    valor: number
    status: string
    dataInicio?: Date | string
    dataFim?: Date | string | null
    passageiro: UsuarioCreateNestedOneWithoutCorridasInput
    motorista?: MotoristaCreateNestedOneWithoutCorridasInput
  }

  export type CorridaUncheckedCreateWithoutAvaliacaoInput = {
    id?: number
    origem: string
    destino: string
    formaPagamento: string
    valor: number
    status: string
    dataInicio?: Date | string
    dataFim?: Date | string | null
    passageiroId: number
    motoristaId?: number | null
  }

  export type CorridaCreateOrConnectWithoutAvaliacaoInput = {
    where: CorridaWhereUniqueInput
    create: XOR<CorridaCreateWithoutAvaliacaoInput, CorridaUncheckedCreateWithoutAvaliacaoInput>
  }

  export type CorridaUpsertWithoutAvaliacaoInput = {
    update: XOR<CorridaUpdateWithoutAvaliacaoInput, CorridaUncheckedUpdateWithoutAvaliacaoInput>
    create: XOR<CorridaCreateWithoutAvaliacaoInput, CorridaUncheckedCreateWithoutAvaliacaoInput>
    where?: CorridaWhereInput
  }

  export type CorridaUpdateToOneWithWhereWithoutAvaliacaoInput = {
    where?: CorridaWhereInput
    data: XOR<CorridaUpdateWithoutAvaliacaoInput, CorridaUncheckedUpdateWithoutAvaliacaoInput>
  }

  export type CorridaUpdateWithoutAvaliacaoInput = {
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passageiro?: UsuarioUpdateOneRequiredWithoutCorridasNestedInput
    motorista?: MotoristaUpdateOneWithoutCorridasNestedInput
  }

  export type CorridaUncheckedUpdateWithoutAvaliacaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passageiroId?: IntFieldUpdateOperationsInput | number
    motoristaId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CorridaCreateManyPassageiroInput = {
    id?: number
    origem: string
    destino: string
    formaPagamento: string
    valor: number
    status: string
    dataInicio?: Date | string
    dataFim?: Date | string | null
    motoristaId?: number | null
  }

  export type CorridaUpdateWithoutPassageiroInput = {
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    motorista?: MotoristaUpdateOneWithoutCorridasNestedInput
    avaliacao?: AvaliacaoUpdateOneWithoutCorridaNestedInput
  }

  export type CorridaUncheckedUpdateWithoutPassageiroInput = {
    id?: IntFieldUpdateOperationsInput | number
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    motoristaId?: NullableIntFieldUpdateOperationsInput | number | null
    avaliacao?: AvaliacaoUncheckedUpdateOneWithoutCorridaNestedInput
  }

  export type CorridaUncheckedUpdateManyWithoutPassageiroInput = {
    id?: IntFieldUpdateOperationsInput | number
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    motoristaId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CorridaCreateManyMotoristaInput = {
    id?: number
    origem: string
    destino: string
    formaPagamento: string
    valor: number
    status: string
    dataInicio?: Date | string
    dataFim?: Date | string | null
    passageiroId: number
  }

  export type CorridaUpdateWithoutMotoristaInput = {
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passageiro?: UsuarioUpdateOneRequiredWithoutCorridasNestedInput
    avaliacao?: AvaliacaoUpdateOneWithoutCorridaNestedInput
  }

  export type CorridaUncheckedUpdateWithoutMotoristaInput = {
    id?: IntFieldUpdateOperationsInput | number
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passageiroId?: IntFieldUpdateOperationsInput | number
    avaliacao?: AvaliacaoUncheckedUpdateOneWithoutCorridaNestedInput
  }

  export type CorridaUncheckedUpdateManyWithoutMotoristaInput = {
    id?: IntFieldUpdateOperationsInput | number
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passageiroId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}