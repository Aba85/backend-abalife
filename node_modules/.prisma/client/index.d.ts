
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuarios
 * 
 */
export type Usuarios = $Result.DefaultSelection<Prisma.$UsuariosPayload>
/**
 * Model Corridas
 * 
 */
export type Corridas = $Result.DefaultSelection<Prisma.$CorridasPayload>
/**
 * Model Recompensas
 * 
 */
export type Recompensas = $Result.DefaultSelection<Prisma.$RecompensasPayload>
/**
 * Model Carteiras
 * 
 */
export type Carteiras = $Result.DefaultSelection<Prisma.$CarteirasPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuarios.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuarios.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuarios`: Exposes CRUD operations for the **Usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.UsuariosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.corridas`: Exposes CRUD operations for the **Corridas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Corridas
    * const corridas = await prisma.corridas.findMany()
    * ```
    */
  get corridas(): Prisma.CorridasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recompensas`: Exposes CRUD operations for the **Recompensas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recompensas
    * const recompensas = await prisma.recompensas.findMany()
    * ```
    */
  get recompensas(): Prisma.RecompensasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.carteiras`: Exposes CRUD operations for the **Carteiras** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carteiras
    * const carteiras = await prisma.carteiras.findMany()
    * ```
    */
  get carteiras(): Prisma.CarteirasDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuarios: 'Usuarios',
    Corridas: 'Corridas',
    Recompensas: 'Recompensas',
    Carteiras: 'Carteiras'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuarios" | "corridas" | "recompensas" | "carteiras"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuarios: {
        payload: Prisma.$UsuariosPayload<ExtArgs>
        fields: Prisma.UsuariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuariosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuariosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          findFirst: {
            args: Prisma.UsuariosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuariosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          findMany: {
            args: Prisma.UsuariosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>[]
          }
          create: {
            args: Prisma.UsuariosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          createMany: {
            args: Prisma.UsuariosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuariosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>[]
          }
          delete: {
            args: Prisma.UsuariosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          update: {
            args: Prisma.UsuariosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          deleteMany: {
            args: Prisma.UsuariosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuariosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuariosUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>[]
          }
          upsert: {
            args: Prisma.UsuariosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuariosPayload>
          }
          aggregate: {
            args: Prisma.UsuariosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuarios>
          }
          groupBy: {
            args: Prisma.UsuariosGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuariosCountArgs<ExtArgs>
            result: $Utils.Optional<UsuariosCountAggregateOutputType> | number
          }
        }
      }
      Corridas: {
        payload: Prisma.$CorridasPayload<ExtArgs>
        fields: Prisma.CorridasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CorridasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CorridasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridasPayload>
          }
          findFirst: {
            args: Prisma.CorridasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CorridasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridasPayload>
          }
          findMany: {
            args: Prisma.CorridasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridasPayload>[]
          }
          create: {
            args: Prisma.CorridasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridasPayload>
          }
          createMany: {
            args: Prisma.CorridasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CorridasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridasPayload>[]
          }
          delete: {
            args: Prisma.CorridasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridasPayload>
          }
          update: {
            args: Prisma.CorridasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridasPayload>
          }
          deleteMany: {
            args: Prisma.CorridasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CorridasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CorridasUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridasPayload>[]
          }
          upsert: {
            args: Prisma.CorridasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorridasPayload>
          }
          aggregate: {
            args: Prisma.CorridasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCorridas>
          }
          groupBy: {
            args: Prisma.CorridasGroupByArgs<ExtArgs>
            result: $Utils.Optional<CorridasGroupByOutputType>[]
          }
          count: {
            args: Prisma.CorridasCountArgs<ExtArgs>
            result: $Utils.Optional<CorridasCountAggregateOutputType> | number
          }
        }
      }
      Recompensas: {
        payload: Prisma.$RecompensasPayload<ExtArgs>
        fields: Prisma.RecompensasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecompensasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecompensasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecompensasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecompensasPayload>
          }
          findFirst: {
            args: Prisma.RecompensasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecompensasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecompensasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecompensasPayload>
          }
          findMany: {
            args: Prisma.RecompensasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecompensasPayload>[]
          }
          create: {
            args: Prisma.RecompensasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecompensasPayload>
          }
          createMany: {
            args: Prisma.RecompensasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecompensasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecompensasPayload>[]
          }
          delete: {
            args: Prisma.RecompensasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecompensasPayload>
          }
          update: {
            args: Prisma.RecompensasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecompensasPayload>
          }
          deleteMany: {
            args: Prisma.RecompensasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecompensasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RecompensasUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecompensasPayload>[]
          }
          upsert: {
            args: Prisma.RecompensasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecompensasPayload>
          }
          aggregate: {
            args: Prisma.RecompensasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecompensas>
          }
          groupBy: {
            args: Prisma.RecompensasGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecompensasGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecompensasCountArgs<ExtArgs>
            result: $Utils.Optional<RecompensasCountAggregateOutputType> | number
          }
        }
      }
      Carteiras: {
        payload: Prisma.$CarteirasPayload<ExtArgs>
        fields: Prisma.CarteirasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CarteirasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteirasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarteirasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteirasPayload>
          }
          findFirst: {
            args: Prisma.CarteirasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteirasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarteirasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteirasPayload>
          }
          findMany: {
            args: Prisma.CarteirasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteirasPayload>[]
          }
          create: {
            args: Prisma.CarteirasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteirasPayload>
          }
          createMany: {
            args: Prisma.CarteirasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CarteirasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteirasPayload>[]
          }
          delete: {
            args: Prisma.CarteirasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteirasPayload>
          }
          update: {
            args: Prisma.CarteirasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteirasPayload>
          }
          deleteMany: {
            args: Prisma.CarteirasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CarteirasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CarteirasUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteirasPayload>[]
          }
          upsert: {
            args: Prisma.CarteirasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarteirasPayload>
          }
          aggregate: {
            args: Prisma.CarteirasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCarteiras>
          }
          groupBy: {
            args: Prisma.CarteirasGroupByArgs<ExtArgs>
            result: $Utils.Optional<CarteirasGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarteirasCountArgs<ExtArgs>
            result: $Utils.Optional<CarteirasCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuarios?: UsuariosOmit
    corridas?: CorridasOmit
    recompensas?: RecompensasOmit
    carteiras?: CarteirasOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuariosCountOutputType
   */

  export type UsuariosCountOutputType = {
    Carteiras: number
    CorridasComoPassageiro: number
    CorridasComoMotorista: number
    Recompensas: number
  }

  export type UsuariosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Carteiras?: boolean | UsuariosCountOutputTypeCountCarteirasArgs
    CorridasComoPassageiro?: boolean | UsuariosCountOutputTypeCountCorridasComoPassageiroArgs
    CorridasComoMotorista?: boolean | UsuariosCountOutputTypeCountCorridasComoMotoristaArgs
    Recompensas?: boolean | UsuariosCountOutputTypeCountRecompensasArgs
  }

  // Custom InputTypes
  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuariosCountOutputType
     */
    select?: UsuariosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountCarteirasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarteirasWhereInput
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountCorridasComoPassageiroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorridasWhereInput
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountCorridasComoMotoristaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorridasWhereInput
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountRecompensasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecompensasWhereInput
  }


  /**
   * Count Type CorridasCountOutputType
   */

  export type CorridasCountOutputType = {
    Recompensas: number
  }

  export type CorridasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Recompensas?: boolean | CorridasCountOutputTypeCountRecompensasArgs
  }

  // Custom InputTypes
  /**
   * CorridasCountOutputType without action
   */
  export type CorridasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorridasCountOutputType
     */
    select?: CorridasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CorridasCountOutputType without action
   */
  export type CorridasCountOutputTypeCountRecompensasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecompensasWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuarios
   */

  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosMinAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    senha: string | null
    cpf: string | null
    celular: string | null
    endereco: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsuariosMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    senha: string | null
    cpf: string | null
    celular: string | null
    endereco: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsuariosCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    cpf: number
    celular: number
    endereco: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UsuariosMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    cpf?: true
    celular?: true
    endereco?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsuariosMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    cpf?: true
    celular?: true
    endereco?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsuariosCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    cpf?: true
    celular?: true
    endereco?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UsuariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to aggregate.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuariosOrderByWithRelationInput | UsuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type UsuariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuariosWhereInput
    orderBy?: UsuariosOrderByWithAggregationInput | UsuariosOrderByWithAggregationInput[]
    by: UsuariosScalarFieldEnum[] | UsuariosScalarFieldEnum
    having?: UsuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }

  export type UsuariosGroupByOutputType = {
    id: string
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    endereco: string | null
    createdAt: Date
    updatedAt: Date
    _count: UsuariosCountAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends UsuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type UsuariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cpf?: boolean
    celular?: boolean
    endereco?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Carteiras?: boolean | Usuarios$CarteirasArgs<ExtArgs>
    CorridasComoPassageiro?: boolean | Usuarios$CorridasComoPassageiroArgs<ExtArgs>
    CorridasComoMotorista?: boolean | Usuarios$CorridasComoMotoristaArgs<ExtArgs>
    Recompensas?: boolean | Usuarios$RecompensasArgs<ExtArgs>
    _count?: boolean | UsuariosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarios"]>

  export type UsuariosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cpf?: boolean
    celular?: boolean
    endereco?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type UsuariosSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cpf?: boolean
    celular?: boolean
    endereco?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type UsuariosSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    cpf?: boolean
    celular?: boolean
    endereco?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UsuariosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "senha" | "cpf" | "celular" | "endereco" | "createdAt" | "updatedAt", ExtArgs["result"]["usuarios"]>
  export type UsuariosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Carteiras?: boolean | Usuarios$CarteirasArgs<ExtArgs>
    CorridasComoPassageiro?: boolean | Usuarios$CorridasComoPassageiroArgs<ExtArgs>
    CorridasComoMotorista?: boolean | Usuarios$CorridasComoMotoristaArgs<ExtArgs>
    Recompensas?: boolean | Usuarios$RecompensasArgs<ExtArgs>
    _count?: boolean | UsuariosCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuariosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsuariosIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuarios"
    objects: {
      Carteiras: Prisma.$CarteirasPayload<ExtArgs>[]
      CorridasComoPassageiro: Prisma.$CorridasPayload<ExtArgs>[]
      CorridasComoMotorista: Prisma.$CorridasPayload<ExtArgs>[]
      Recompensas: Prisma.$RecompensasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      email: string
      senha: string
      cpf: string
      celular: string
      endereco: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["usuarios"]>
    composites: {}
  }

  type UsuariosGetPayload<S extends boolean | null | undefined | UsuariosDefaultArgs> = $Result.GetResult<Prisma.$UsuariosPayload, S>

  type UsuariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuariosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface UsuariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuarios'], meta: { name: 'Usuarios' } }
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {UsuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuariosFindUniqueArgs>(args: SelectSubset<T, UsuariosFindUniqueArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuarios that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuariosFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuariosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuariosFindFirstArgs>(args?: SelectSubset<T, UsuariosFindFirstArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuariosFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuariosFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuariosFindManyArgs>(args?: SelectSubset<T, UsuariosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuarios.
     * @param {UsuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
     */
    create<T extends UsuariosCreateArgs>(args: SelectSubset<T, UsuariosCreateArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuariosCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuariosCreateManyArgs>(args?: SelectSubset<T, UsuariosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuariosCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuariosCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuariosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuarios.
     * @param {UsuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
     */
    delete<T extends UsuariosDeleteArgs>(args: SelectSubset<T, UsuariosDeleteArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuarios.
     * @param {UsuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuariosUpdateArgs>(args: SelectSubset<T, UsuariosUpdateArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuariosDeleteManyArgs>(args?: SelectSubset<T, UsuariosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuariosUpdateManyArgs>(args: SelectSubset<T, UsuariosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuariosUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuariosUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuariosUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuarios.
     * @param {UsuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
     */
    upsert<T extends UsuariosUpsertArgs>(args: SelectSubset<T, UsuariosUpsertArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuariosCountArgs>(
      args?: Subset<T, UsuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuariosGroupByArgs['orderBy'] }
        : { orderBy?: UsuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuarios model
   */
  readonly fields: UsuariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Carteiras<T extends Usuarios$CarteirasArgs<ExtArgs> = {}>(args?: Subset<T, Usuarios$CarteirasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarteirasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CorridasComoPassageiro<T extends Usuarios$CorridasComoPassageiroArgs<ExtArgs> = {}>(args?: Subset<T, Usuarios$CorridasComoPassageiroArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CorridasComoMotorista<T extends Usuarios$CorridasComoMotoristaArgs<ExtArgs> = {}>(args?: Subset<T, Usuarios$CorridasComoMotoristaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Recompensas<T extends Usuarios$RecompensasArgs<ExtArgs> = {}>(args?: Subset<T, Usuarios$RecompensasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecompensasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuarios model
   */
  interface UsuariosFieldRefs {
    readonly id: FieldRef<"Usuarios", 'String'>
    readonly nome: FieldRef<"Usuarios", 'String'>
    readonly email: FieldRef<"Usuarios", 'String'>
    readonly senha: FieldRef<"Usuarios", 'String'>
    readonly cpf: FieldRef<"Usuarios", 'String'>
    readonly celular: FieldRef<"Usuarios", 'String'>
    readonly endereco: FieldRef<"Usuarios", 'String'>
    readonly createdAt: FieldRef<"Usuarios", 'DateTime'>
    readonly updatedAt: FieldRef<"Usuarios", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Usuarios findUnique
   */
  export type UsuariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios findUniqueOrThrow
   */
  export type UsuariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios findFirst
   */
  export type UsuariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuariosOrderByWithRelationInput | UsuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * Usuarios findFirstOrThrow
   */
  export type UsuariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuariosOrderByWithRelationInput | UsuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * Usuarios findMany
   */
  export type UsuariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuariosOrderByWithRelationInput | UsuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * Usuarios create
   */
  export type UsuariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuarios.
     */
    data: XOR<UsuariosCreateInput, UsuariosUncheckedCreateInput>
  }

  /**
   * Usuarios createMany
   */
  export type UsuariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuariosCreateManyInput | UsuariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuarios createManyAndReturn
   */
  export type UsuariosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuariosCreateManyInput | UsuariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuarios update
   */
  export type UsuariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuarios.
     */
    data: XOR<UsuariosUpdateInput, UsuariosUncheckedUpdateInput>
    /**
     * Choose, which Usuarios to update.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios updateMany
   */
  export type UsuariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuariosUpdateManyMutationInput, UsuariosUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuariosWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuarios updateManyAndReturn
   */
  export type UsuariosUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuariosUpdateManyMutationInput, UsuariosUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuariosWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuarios upsert
   */
  export type UsuariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuarios to update in case it exists.
     */
    where: UsuariosWhereUniqueInput
    /**
     * In case the Usuarios found by the `where` argument doesn't exist, create a new Usuarios with this data.
     */
    create: XOR<UsuariosCreateInput, UsuariosUncheckedCreateInput>
    /**
     * In case the Usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuariosUpdateInput, UsuariosUncheckedUpdateInput>
  }

  /**
   * Usuarios delete
   */
  export type UsuariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    /**
     * Filter which Usuarios to delete.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios deleteMany
   */
  export type UsuariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuariosWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuarios.Carteiras
   */
  export type Usuarios$CarteirasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carteiras
     */
    select?: CarteirasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carteiras
     */
    omit?: CarteirasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteirasInclude<ExtArgs> | null
    where?: CarteirasWhereInput
    orderBy?: CarteirasOrderByWithRelationInput | CarteirasOrderByWithRelationInput[]
    cursor?: CarteirasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarteirasScalarFieldEnum | CarteirasScalarFieldEnum[]
  }

  /**
   * Usuarios.CorridasComoPassageiro
   */
  export type Usuarios$CorridasComoPassageiroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasInclude<ExtArgs> | null
    where?: CorridasWhereInput
    orderBy?: CorridasOrderByWithRelationInput | CorridasOrderByWithRelationInput[]
    cursor?: CorridasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CorridasScalarFieldEnum | CorridasScalarFieldEnum[]
  }

  /**
   * Usuarios.CorridasComoMotorista
   */
  export type Usuarios$CorridasComoMotoristaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasInclude<ExtArgs> | null
    where?: CorridasWhereInput
    orderBy?: CorridasOrderByWithRelationInput | CorridasOrderByWithRelationInput[]
    cursor?: CorridasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CorridasScalarFieldEnum | CorridasScalarFieldEnum[]
  }

  /**
   * Usuarios.Recompensas
   */
  export type Usuarios$RecompensasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasInclude<ExtArgs> | null
    where?: RecompensasWhereInput
    orderBy?: RecompensasOrderByWithRelationInput | RecompensasOrderByWithRelationInput[]
    cursor?: RecompensasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecompensasScalarFieldEnum | RecompensasScalarFieldEnum[]
  }

  /**
   * Usuarios without action
   */
  export type UsuariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
  }


  /**
   * Model Corridas
   */

  export type AggregateCorridas = {
    _count: CorridasCountAggregateOutputType | null
    _min: CorridasMinAggregateOutputType | null
    _max: CorridasMaxAggregateOutputType | null
  }

  export type CorridasMinAggregateOutputType = {
    id: string | null
    passageiroId: string | null
    motoristaId: string | null
    dataHora: Date | null
    localInicio: string | null
    localFim: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CorridasMaxAggregateOutputType = {
    id: string | null
    passageiroId: string | null
    motoristaId: string | null
    dataHora: Date | null
    localInicio: string | null
    localFim: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CorridasCountAggregateOutputType = {
    id: number
    passageiroId: number
    motoristaId: number
    dataHora: number
    localInicio: number
    localFim: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CorridasMinAggregateInputType = {
    id?: true
    passageiroId?: true
    motoristaId?: true
    dataHora?: true
    localInicio?: true
    localFim?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CorridasMaxAggregateInputType = {
    id?: true
    passageiroId?: true
    motoristaId?: true
    dataHora?: true
    localInicio?: true
    localFim?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CorridasCountAggregateInputType = {
    id?: true
    passageiroId?: true
    motoristaId?: true
    dataHora?: true
    localInicio?: true
    localFim?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CorridasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Corridas to aggregate.
     */
    where?: CorridasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Corridas to fetch.
     */
    orderBy?: CorridasOrderByWithRelationInput | CorridasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CorridasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Corridas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Corridas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Corridas
    **/
    _count?: true | CorridasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CorridasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CorridasMaxAggregateInputType
  }

  export type GetCorridasAggregateType<T extends CorridasAggregateArgs> = {
        [P in keyof T & keyof AggregateCorridas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCorridas[P]>
      : GetScalarType<T[P], AggregateCorridas[P]>
  }




  export type CorridasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorridasWhereInput
    orderBy?: CorridasOrderByWithAggregationInput | CorridasOrderByWithAggregationInput[]
    by: CorridasScalarFieldEnum[] | CorridasScalarFieldEnum
    having?: CorridasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CorridasCountAggregateInputType | true
    _min?: CorridasMinAggregateInputType
    _max?: CorridasMaxAggregateInputType
  }

  export type CorridasGroupByOutputType = {
    id: string
    passageiroId: string
    motoristaId: string | null
    dataHora: Date
    localInicio: string
    localFim: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: CorridasCountAggregateOutputType | null
    _min: CorridasMinAggregateOutputType | null
    _max: CorridasMaxAggregateOutputType | null
  }

  type GetCorridasGroupByPayload<T extends CorridasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CorridasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CorridasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CorridasGroupByOutputType[P]>
            : GetScalarType<T[P], CorridasGroupByOutputType[P]>
        }
      >
    >


  export type CorridasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    passageiroId?: boolean
    motoristaId?: boolean
    dataHora?: boolean
    localInicio?: boolean
    localFim?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passageiro?: boolean | UsuariosDefaultArgs<ExtArgs>
    motorista?: boolean | Corridas$motoristaArgs<ExtArgs>
    Recompensas?: boolean | Corridas$RecompensasArgs<ExtArgs>
    _count?: boolean | CorridasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["corridas"]>

  export type CorridasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    passageiroId?: boolean
    motoristaId?: boolean
    dataHora?: boolean
    localInicio?: boolean
    localFim?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passageiro?: boolean | UsuariosDefaultArgs<ExtArgs>
    motorista?: boolean | Corridas$motoristaArgs<ExtArgs>
  }, ExtArgs["result"]["corridas"]>

  export type CorridasSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    passageiroId?: boolean
    motoristaId?: boolean
    dataHora?: boolean
    localInicio?: boolean
    localFim?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passageiro?: boolean | UsuariosDefaultArgs<ExtArgs>
    motorista?: boolean | Corridas$motoristaArgs<ExtArgs>
  }, ExtArgs["result"]["corridas"]>

  export type CorridasSelectScalar = {
    id?: boolean
    passageiroId?: boolean
    motoristaId?: boolean
    dataHora?: boolean
    localInicio?: boolean
    localFim?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CorridasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "passageiroId" | "motoristaId" | "dataHora" | "localInicio" | "localFim" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["corridas"]>
  export type CorridasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passageiro?: boolean | UsuariosDefaultArgs<ExtArgs>
    motorista?: boolean | Corridas$motoristaArgs<ExtArgs>
    Recompensas?: boolean | Corridas$RecompensasArgs<ExtArgs>
    _count?: boolean | CorridasCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CorridasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passageiro?: boolean | UsuariosDefaultArgs<ExtArgs>
    motorista?: boolean | Corridas$motoristaArgs<ExtArgs>
  }
  export type CorridasIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passageiro?: boolean | UsuariosDefaultArgs<ExtArgs>
    motorista?: boolean | Corridas$motoristaArgs<ExtArgs>
  }

  export type $CorridasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Corridas"
    objects: {
      passageiro: Prisma.$UsuariosPayload<ExtArgs>
      motorista: Prisma.$UsuariosPayload<ExtArgs> | null
      Recompensas: Prisma.$RecompensasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      passageiroId: string
      motoristaId: string | null
      dataHora: Date
      localInicio: string
      localFim: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["corridas"]>
    composites: {}
  }

  type CorridasGetPayload<S extends boolean | null | undefined | CorridasDefaultArgs> = $Result.GetResult<Prisma.$CorridasPayload, S>

  type CorridasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CorridasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CorridasCountAggregateInputType | true
    }

  export interface CorridasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Corridas'], meta: { name: 'Corridas' } }
    /**
     * Find zero or one Corridas that matches the filter.
     * @param {CorridasFindUniqueArgs} args - Arguments to find a Corridas
     * @example
     * // Get one Corridas
     * const corridas = await prisma.corridas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CorridasFindUniqueArgs>(args: SelectSubset<T, CorridasFindUniqueArgs<ExtArgs>>): Prisma__CorridasClient<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Corridas that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CorridasFindUniqueOrThrowArgs} args - Arguments to find a Corridas
     * @example
     * // Get one Corridas
     * const corridas = await prisma.corridas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CorridasFindUniqueOrThrowArgs>(args: SelectSubset<T, CorridasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CorridasClient<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Corridas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridasFindFirstArgs} args - Arguments to find a Corridas
     * @example
     * // Get one Corridas
     * const corridas = await prisma.corridas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CorridasFindFirstArgs>(args?: SelectSubset<T, CorridasFindFirstArgs<ExtArgs>>): Prisma__CorridasClient<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Corridas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridasFindFirstOrThrowArgs} args - Arguments to find a Corridas
     * @example
     * // Get one Corridas
     * const corridas = await prisma.corridas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CorridasFindFirstOrThrowArgs>(args?: SelectSubset<T, CorridasFindFirstOrThrowArgs<ExtArgs>>): Prisma__CorridasClient<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Corridas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Corridas
     * const corridas = await prisma.corridas.findMany()
     * 
     * // Get first 10 Corridas
     * const corridas = await prisma.corridas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const corridasWithIdOnly = await prisma.corridas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CorridasFindManyArgs>(args?: SelectSubset<T, CorridasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Corridas.
     * @param {CorridasCreateArgs} args - Arguments to create a Corridas.
     * @example
     * // Create one Corridas
     * const Corridas = await prisma.corridas.create({
     *   data: {
     *     // ... data to create a Corridas
     *   }
     * })
     * 
     */
    create<T extends CorridasCreateArgs>(args: SelectSubset<T, CorridasCreateArgs<ExtArgs>>): Prisma__CorridasClient<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Corridas.
     * @param {CorridasCreateManyArgs} args - Arguments to create many Corridas.
     * @example
     * // Create many Corridas
     * const corridas = await prisma.corridas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CorridasCreateManyArgs>(args?: SelectSubset<T, CorridasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Corridas and returns the data saved in the database.
     * @param {CorridasCreateManyAndReturnArgs} args - Arguments to create many Corridas.
     * @example
     * // Create many Corridas
     * const corridas = await prisma.corridas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Corridas and only return the `id`
     * const corridasWithIdOnly = await prisma.corridas.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CorridasCreateManyAndReturnArgs>(args?: SelectSubset<T, CorridasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Corridas.
     * @param {CorridasDeleteArgs} args - Arguments to delete one Corridas.
     * @example
     * // Delete one Corridas
     * const Corridas = await prisma.corridas.delete({
     *   where: {
     *     // ... filter to delete one Corridas
     *   }
     * })
     * 
     */
    delete<T extends CorridasDeleteArgs>(args: SelectSubset<T, CorridasDeleteArgs<ExtArgs>>): Prisma__CorridasClient<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Corridas.
     * @param {CorridasUpdateArgs} args - Arguments to update one Corridas.
     * @example
     * // Update one Corridas
     * const corridas = await prisma.corridas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CorridasUpdateArgs>(args: SelectSubset<T, CorridasUpdateArgs<ExtArgs>>): Prisma__CorridasClient<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Corridas.
     * @param {CorridasDeleteManyArgs} args - Arguments to filter Corridas to delete.
     * @example
     * // Delete a few Corridas
     * const { count } = await prisma.corridas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CorridasDeleteManyArgs>(args?: SelectSubset<T, CorridasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Corridas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Corridas
     * const corridas = await prisma.corridas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CorridasUpdateManyArgs>(args: SelectSubset<T, CorridasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Corridas and returns the data updated in the database.
     * @param {CorridasUpdateManyAndReturnArgs} args - Arguments to update many Corridas.
     * @example
     * // Update many Corridas
     * const corridas = await prisma.corridas.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Corridas and only return the `id`
     * const corridasWithIdOnly = await prisma.corridas.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CorridasUpdateManyAndReturnArgs>(args: SelectSubset<T, CorridasUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Corridas.
     * @param {CorridasUpsertArgs} args - Arguments to update or create a Corridas.
     * @example
     * // Update or create a Corridas
     * const corridas = await prisma.corridas.upsert({
     *   create: {
     *     // ... data to create a Corridas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Corridas we want to update
     *   }
     * })
     */
    upsert<T extends CorridasUpsertArgs>(args: SelectSubset<T, CorridasUpsertArgs<ExtArgs>>): Prisma__CorridasClient<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Corridas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridasCountArgs} args - Arguments to filter Corridas to count.
     * @example
     * // Count the number of Corridas
     * const count = await prisma.corridas.count({
     *   where: {
     *     // ... the filter for the Corridas we want to count
     *   }
     * })
    **/
    count<T extends CorridasCountArgs>(
      args?: Subset<T, CorridasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CorridasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Corridas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CorridasAggregateArgs>(args: Subset<T, CorridasAggregateArgs>): Prisma.PrismaPromise<GetCorridasAggregateType<T>>

    /**
     * Group by Corridas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorridasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CorridasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CorridasGroupByArgs['orderBy'] }
        : { orderBy?: CorridasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CorridasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCorridasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Corridas model
   */
  readonly fields: CorridasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Corridas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CorridasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    passageiro<T extends UsuariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuariosDefaultArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    motorista<T extends Corridas$motoristaArgs<ExtArgs> = {}>(args?: Subset<T, Corridas$motoristaArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Recompensas<T extends Corridas$RecompensasArgs<ExtArgs> = {}>(args?: Subset<T, Corridas$RecompensasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecompensasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Corridas model
   */
  interface CorridasFieldRefs {
    readonly id: FieldRef<"Corridas", 'String'>
    readonly passageiroId: FieldRef<"Corridas", 'String'>
    readonly motoristaId: FieldRef<"Corridas", 'String'>
    readonly dataHora: FieldRef<"Corridas", 'DateTime'>
    readonly localInicio: FieldRef<"Corridas", 'String'>
    readonly localFim: FieldRef<"Corridas", 'String'>
    readonly status: FieldRef<"Corridas", 'String'>
    readonly createdAt: FieldRef<"Corridas", 'DateTime'>
    readonly updatedAt: FieldRef<"Corridas", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Corridas findUnique
   */
  export type CorridasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasInclude<ExtArgs> | null
    /**
     * Filter, which Corridas to fetch.
     */
    where: CorridasWhereUniqueInput
  }

  /**
   * Corridas findUniqueOrThrow
   */
  export type CorridasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasInclude<ExtArgs> | null
    /**
     * Filter, which Corridas to fetch.
     */
    where: CorridasWhereUniqueInput
  }

  /**
   * Corridas findFirst
   */
  export type CorridasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasInclude<ExtArgs> | null
    /**
     * Filter, which Corridas to fetch.
     */
    where?: CorridasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Corridas to fetch.
     */
    orderBy?: CorridasOrderByWithRelationInput | CorridasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Corridas.
     */
    cursor?: CorridasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Corridas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Corridas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Corridas.
     */
    distinct?: CorridasScalarFieldEnum | CorridasScalarFieldEnum[]
  }

  /**
   * Corridas findFirstOrThrow
   */
  export type CorridasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasInclude<ExtArgs> | null
    /**
     * Filter, which Corridas to fetch.
     */
    where?: CorridasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Corridas to fetch.
     */
    orderBy?: CorridasOrderByWithRelationInput | CorridasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Corridas.
     */
    cursor?: CorridasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Corridas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Corridas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Corridas.
     */
    distinct?: CorridasScalarFieldEnum | CorridasScalarFieldEnum[]
  }

  /**
   * Corridas findMany
   */
  export type CorridasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasInclude<ExtArgs> | null
    /**
     * Filter, which Corridas to fetch.
     */
    where?: CorridasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Corridas to fetch.
     */
    orderBy?: CorridasOrderByWithRelationInput | CorridasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Corridas.
     */
    cursor?: CorridasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Corridas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Corridas.
     */
    skip?: number
    distinct?: CorridasScalarFieldEnum | CorridasScalarFieldEnum[]
  }

  /**
   * Corridas create
   */
  export type CorridasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasInclude<ExtArgs> | null
    /**
     * The data needed to create a Corridas.
     */
    data: XOR<CorridasCreateInput, CorridasUncheckedCreateInput>
  }

  /**
   * Corridas createMany
   */
  export type CorridasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Corridas.
     */
    data: CorridasCreateManyInput | CorridasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Corridas createManyAndReturn
   */
  export type CorridasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * The data used to create many Corridas.
     */
    data: CorridasCreateManyInput | CorridasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Corridas update
   */
  export type CorridasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasInclude<ExtArgs> | null
    /**
     * The data needed to update a Corridas.
     */
    data: XOR<CorridasUpdateInput, CorridasUncheckedUpdateInput>
    /**
     * Choose, which Corridas to update.
     */
    where: CorridasWhereUniqueInput
  }

  /**
   * Corridas updateMany
   */
  export type CorridasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Corridas.
     */
    data: XOR<CorridasUpdateManyMutationInput, CorridasUncheckedUpdateManyInput>
    /**
     * Filter which Corridas to update
     */
    where?: CorridasWhereInput
    /**
     * Limit how many Corridas to update.
     */
    limit?: number
  }

  /**
   * Corridas updateManyAndReturn
   */
  export type CorridasUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * The data used to update Corridas.
     */
    data: XOR<CorridasUpdateManyMutationInput, CorridasUncheckedUpdateManyInput>
    /**
     * Filter which Corridas to update
     */
    where?: CorridasWhereInput
    /**
     * Limit how many Corridas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Corridas upsert
   */
  export type CorridasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasInclude<ExtArgs> | null
    /**
     * The filter to search for the Corridas to update in case it exists.
     */
    where: CorridasWhereUniqueInput
    /**
     * In case the Corridas found by the `where` argument doesn't exist, create a new Corridas with this data.
     */
    create: XOR<CorridasCreateInput, CorridasUncheckedCreateInput>
    /**
     * In case the Corridas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CorridasUpdateInput, CorridasUncheckedUpdateInput>
  }

  /**
   * Corridas delete
   */
  export type CorridasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasInclude<ExtArgs> | null
    /**
     * Filter which Corridas to delete.
     */
    where: CorridasWhereUniqueInput
  }

  /**
   * Corridas deleteMany
   */
  export type CorridasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Corridas to delete
     */
    where?: CorridasWhereInput
    /**
     * Limit how many Corridas to delete.
     */
    limit?: number
  }

  /**
   * Corridas.motorista
   */
  export type Corridas$motoristaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuarios
     */
    omit?: UsuariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuariosInclude<ExtArgs> | null
    where?: UsuariosWhereInput
  }

  /**
   * Corridas.Recompensas
   */
  export type Corridas$RecompensasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasInclude<ExtArgs> | null
    where?: RecompensasWhereInput
    orderBy?: RecompensasOrderByWithRelationInput | RecompensasOrderByWithRelationInput[]
    cursor?: RecompensasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecompensasScalarFieldEnum | RecompensasScalarFieldEnum[]
  }

  /**
   * Corridas without action
   */
  export type CorridasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasInclude<ExtArgs> | null
  }


  /**
   * Model Recompensas
   */

  export type AggregateRecompensas = {
    _count: RecompensasCountAggregateOutputType | null
    _avg: RecompensasAvgAggregateOutputType | null
    _sum: RecompensasSumAggregateOutputType | null
    _min: RecompensasMinAggregateOutputType | null
    _max: RecompensasMaxAggregateOutputType | null
  }

  export type RecompensasAvgAggregateOutputType = {
    valor: number | null
  }

  export type RecompensasSumAggregateOutputType = {
    valor: number | null
  }

  export type RecompensasMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    corridaId: string | null
    valor: number | null
    tipo: string | null
    data: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecompensasMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    corridaId: string | null
    valor: number | null
    tipo: string | null
    data: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecompensasCountAggregateOutputType = {
    id: number
    usuarioId: number
    corridaId: number
    valor: number
    tipo: number
    data: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RecompensasAvgAggregateInputType = {
    valor?: true
  }

  export type RecompensasSumAggregateInputType = {
    valor?: true
  }

  export type RecompensasMinAggregateInputType = {
    id?: true
    usuarioId?: true
    corridaId?: true
    valor?: true
    tipo?: true
    data?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecompensasMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    corridaId?: true
    valor?: true
    tipo?: true
    data?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecompensasCountAggregateInputType = {
    id?: true
    usuarioId?: true
    corridaId?: true
    valor?: true
    tipo?: true
    data?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RecompensasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recompensas to aggregate.
     */
    where?: RecompensasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recompensas to fetch.
     */
    orderBy?: RecompensasOrderByWithRelationInput | RecompensasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecompensasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recompensas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recompensas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recompensas
    **/
    _count?: true | RecompensasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecompensasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecompensasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecompensasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecompensasMaxAggregateInputType
  }

  export type GetRecompensasAggregateType<T extends RecompensasAggregateArgs> = {
        [P in keyof T & keyof AggregateRecompensas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecompensas[P]>
      : GetScalarType<T[P], AggregateRecompensas[P]>
  }




  export type RecompensasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecompensasWhereInput
    orderBy?: RecompensasOrderByWithAggregationInput | RecompensasOrderByWithAggregationInput[]
    by: RecompensasScalarFieldEnum[] | RecompensasScalarFieldEnum
    having?: RecompensasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecompensasCountAggregateInputType | true
    _avg?: RecompensasAvgAggregateInputType
    _sum?: RecompensasSumAggregateInputType
    _min?: RecompensasMinAggregateInputType
    _max?: RecompensasMaxAggregateInputType
  }

  export type RecompensasGroupByOutputType = {
    id: string
    usuarioId: string
    corridaId: string | null
    valor: number
    tipo: string
    data: Date
    createdAt: Date
    updatedAt: Date
    _count: RecompensasCountAggregateOutputType | null
    _avg: RecompensasAvgAggregateOutputType | null
    _sum: RecompensasSumAggregateOutputType | null
    _min: RecompensasMinAggregateOutputType | null
    _max: RecompensasMaxAggregateOutputType | null
  }

  type GetRecompensasGroupByPayload<T extends RecompensasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecompensasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecompensasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecompensasGroupByOutputType[P]>
            : GetScalarType<T[P], RecompensasGroupByOutputType[P]>
        }
      >
    >


  export type RecompensasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    corridaId?: boolean
    valor?: boolean
    tipo?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
    corrida?: boolean | Recompensas$corridaArgs<ExtArgs>
  }, ExtArgs["result"]["recompensas"]>

  export type RecompensasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    corridaId?: boolean
    valor?: boolean
    tipo?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
    corrida?: boolean | Recompensas$corridaArgs<ExtArgs>
  }, ExtArgs["result"]["recompensas"]>

  export type RecompensasSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    corridaId?: boolean
    valor?: boolean
    tipo?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
    corrida?: boolean | Recompensas$corridaArgs<ExtArgs>
  }, ExtArgs["result"]["recompensas"]>

  export type RecompensasSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    corridaId?: boolean
    valor?: boolean
    tipo?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RecompensasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usuarioId" | "corridaId" | "valor" | "tipo" | "data" | "createdAt" | "updatedAt", ExtArgs["result"]["recompensas"]>
  export type RecompensasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
    corrida?: boolean | Recompensas$corridaArgs<ExtArgs>
  }
  export type RecompensasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
    corrida?: boolean | Recompensas$corridaArgs<ExtArgs>
  }
  export type RecompensasIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
    corrida?: boolean | Recompensas$corridaArgs<ExtArgs>
  }

  export type $RecompensasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recompensas"
    objects: {
      usuario: Prisma.$UsuariosPayload<ExtArgs>
      corrida: Prisma.$CorridasPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      corridaId: string | null
      valor: number
      tipo: string
      data: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["recompensas"]>
    composites: {}
  }

  type RecompensasGetPayload<S extends boolean | null | undefined | RecompensasDefaultArgs> = $Result.GetResult<Prisma.$RecompensasPayload, S>

  type RecompensasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecompensasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecompensasCountAggregateInputType | true
    }

  export interface RecompensasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recompensas'], meta: { name: 'Recompensas' } }
    /**
     * Find zero or one Recompensas that matches the filter.
     * @param {RecompensasFindUniqueArgs} args - Arguments to find a Recompensas
     * @example
     * // Get one Recompensas
     * const recompensas = await prisma.recompensas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecompensasFindUniqueArgs>(args: SelectSubset<T, RecompensasFindUniqueArgs<ExtArgs>>): Prisma__RecompensasClient<$Result.GetResult<Prisma.$RecompensasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Recompensas that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecompensasFindUniqueOrThrowArgs} args - Arguments to find a Recompensas
     * @example
     * // Get one Recompensas
     * const recompensas = await prisma.recompensas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecompensasFindUniqueOrThrowArgs>(args: SelectSubset<T, RecompensasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecompensasClient<$Result.GetResult<Prisma.$RecompensasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recompensas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecompensasFindFirstArgs} args - Arguments to find a Recompensas
     * @example
     * // Get one Recompensas
     * const recompensas = await prisma.recompensas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecompensasFindFirstArgs>(args?: SelectSubset<T, RecompensasFindFirstArgs<ExtArgs>>): Prisma__RecompensasClient<$Result.GetResult<Prisma.$RecompensasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recompensas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecompensasFindFirstOrThrowArgs} args - Arguments to find a Recompensas
     * @example
     * // Get one Recompensas
     * const recompensas = await prisma.recompensas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecompensasFindFirstOrThrowArgs>(args?: SelectSubset<T, RecompensasFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecompensasClient<$Result.GetResult<Prisma.$RecompensasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Recompensas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecompensasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recompensas
     * const recompensas = await prisma.recompensas.findMany()
     * 
     * // Get first 10 Recompensas
     * const recompensas = await prisma.recompensas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recompensasWithIdOnly = await prisma.recompensas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecompensasFindManyArgs>(args?: SelectSubset<T, RecompensasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecompensasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Recompensas.
     * @param {RecompensasCreateArgs} args - Arguments to create a Recompensas.
     * @example
     * // Create one Recompensas
     * const Recompensas = await prisma.recompensas.create({
     *   data: {
     *     // ... data to create a Recompensas
     *   }
     * })
     * 
     */
    create<T extends RecompensasCreateArgs>(args: SelectSubset<T, RecompensasCreateArgs<ExtArgs>>): Prisma__RecompensasClient<$Result.GetResult<Prisma.$RecompensasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Recompensas.
     * @param {RecompensasCreateManyArgs} args - Arguments to create many Recompensas.
     * @example
     * // Create many Recompensas
     * const recompensas = await prisma.recompensas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecompensasCreateManyArgs>(args?: SelectSubset<T, RecompensasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recompensas and returns the data saved in the database.
     * @param {RecompensasCreateManyAndReturnArgs} args - Arguments to create many Recompensas.
     * @example
     * // Create many Recompensas
     * const recompensas = await prisma.recompensas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recompensas and only return the `id`
     * const recompensasWithIdOnly = await prisma.recompensas.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecompensasCreateManyAndReturnArgs>(args?: SelectSubset<T, RecompensasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecompensasPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Recompensas.
     * @param {RecompensasDeleteArgs} args - Arguments to delete one Recompensas.
     * @example
     * // Delete one Recompensas
     * const Recompensas = await prisma.recompensas.delete({
     *   where: {
     *     // ... filter to delete one Recompensas
     *   }
     * })
     * 
     */
    delete<T extends RecompensasDeleteArgs>(args: SelectSubset<T, RecompensasDeleteArgs<ExtArgs>>): Prisma__RecompensasClient<$Result.GetResult<Prisma.$RecompensasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Recompensas.
     * @param {RecompensasUpdateArgs} args - Arguments to update one Recompensas.
     * @example
     * // Update one Recompensas
     * const recompensas = await prisma.recompensas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecompensasUpdateArgs>(args: SelectSubset<T, RecompensasUpdateArgs<ExtArgs>>): Prisma__RecompensasClient<$Result.GetResult<Prisma.$RecompensasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Recompensas.
     * @param {RecompensasDeleteManyArgs} args - Arguments to filter Recompensas to delete.
     * @example
     * // Delete a few Recompensas
     * const { count } = await prisma.recompensas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecompensasDeleteManyArgs>(args?: SelectSubset<T, RecompensasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recompensas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecompensasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recompensas
     * const recompensas = await prisma.recompensas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecompensasUpdateManyArgs>(args: SelectSubset<T, RecompensasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recompensas and returns the data updated in the database.
     * @param {RecompensasUpdateManyAndReturnArgs} args - Arguments to update many Recompensas.
     * @example
     * // Update many Recompensas
     * const recompensas = await prisma.recompensas.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Recompensas and only return the `id`
     * const recompensasWithIdOnly = await prisma.recompensas.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RecompensasUpdateManyAndReturnArgs>(args: SelectSubset<T, RecompensasUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecompensasPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Recompensas.
     * @param {RecompensasUpsertArgs} args - Arguments to update or create a Recompensas.
     * @example
     * // Update or create a Recompensas
     * const recompensas = await prisma.recompensas.upsert({
     *   create: {
     *     // ... data to create a Recompensas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recompensas we want to update
     *   }
     * })
     */
    upsert<T extends RecompensasUpsertArgs>(args: SelectSubset<T, RecompensasUpsertArgs<ExtArgs>>): Prisma__RecompensasClient<$Result.GetResult<Prisma.$RecompensasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Recompensas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecompensasCountArgs} args - Arguments to filter Recompensas to count.
     * @example
     * // Count the number of Recompensas
     * const count = await prisma.recompensas.count({
     *   where: {
     *     // ... the filter for the Recompensas we want to count
     *   }
     * })
    **/
    count<T extends RecompensasCountArgs>(
      args?: Subset<T, RecompensasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecompensasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recompensas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecompensasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecompensasAggregateArgs>(args: Subset<T, RecompensasAggregateArgs>): Prisma.PrismaPromise<GetRecompensasAggregateType<T>>

    /**
     * Group by Recompensas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecompensasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecompensasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecompensasGroupByArgs['orderBy'] }
        : { orderBy?: RecompensasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecompensasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecompensasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recompensas model
   */
  readonly fields: RecompensasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recompensas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecompensasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuariosDefaultArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    corrida<T extends Recompensas$corridaArgs<ExtArgs> = {}>(args?: Subset<T, Recompensas$corridaArgs<ExtArgs>>): Prisma__CorridasClient<$Result.GetResult<Prisma.$CorridasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recompensas model
   */
  interface RecompensasFieldRefs {
    readonly id: FieldRef<"Recompensas", 'String'>
    readonly usuarioId: FieldRef<"Recompensas", 'String'>
    readonly corridaId: FieldRef<"Recompensas", 'String'>
    readonly valor: FieldRef<"Recompensas", 'Float'>
    readonly tipo: FieldRef<"Recompensas", 'String'>
    readonly data: FieldRef<"Recompensas", 'DateTime'>
    readonly createdAt: FieldRef<"Recompensas", 'DateTime'>
    readonly updatedAt: FieldRef<"Recompensas", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Recompensas findUnique
   */
  export type RecompensasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasInclude<ExtArgs> | null
    /**
     * Filter, which Recompensas to fetch.
     */
    where: RecompensasWhereUniqueInput
  }

  /**
   * Recompensas findUniqueOrThrow
   */
  export type RecompensasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasInclude<ExtArgs> | null
    /**
     * Filter, which Recompensas to fetch.
     */
    where: RecompensasWhereUniqueInput
  }

  /**
   * Recompensas findFirst
   */
  export type RecompensasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasInclude<ExtArgs> | null
    /**
     * Filter, which Recompensas to fetch.
     */
    where?: RecompensasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recompensas to fetch.
     */
    orderBy?: RecompensasOrderByWithRelationInput | RecompensasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recompensas.
     */
    cursor?: RecompensasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recompensas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recompensas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recompensas.
     */
    distinct?: RecompensasScalarFieldEnum | RecompensasScalarFieldEnum[]
  }

  /**
   * Recompensas findFirstOrThrow
   */
  export type RecompensasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasInclude<ExtArgs> | null
    /**
     * Filter, which Recompensas to fetch.
     */
    where?: RecompensasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recompensas to fetch.
     */
    orderBy?: RecompensasOrderByWithRelationInput | RecompensasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recompensas.
     */
    cursor?: RecompensasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recompensas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recompensas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recompensas.
     */
    distinct?: RecompensasScalarFieldEnum | RecompensasScalarFieldEnum[]
  }

  /**
   * Recompensas findMany
   */
  export type RecompensasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasInclude<ExtArgs> | null
    /**
     * Filter, which Recompensas to fetch.
     */
    where?: RecompensasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recompensas to fetch.
     */
    orderBy?: RecompensasOrderByWithRelationInput | RecompensasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recompensas.
     */
    cursor?: RecompensasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recompensas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recompensas.
     */
    skip?: number
    distinct?: RecompensasScalarFieldEnum | RecompensasScalarFieldEnum[]
  }

  /**
   * Recompensas create
   */
  export type RecompensasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasInclude<ExtArgs> | null
    /**
     * The data needed to create a Recompensas.
     */
    data: XOR<RecompensasCreateInput, RecompensasUncheckedCreateInput>
  }

  /**
   * Recompensas createMany
   */
  export type RecompensasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recompensas.
     */
    data: RecompensasCreateManyInput | RecompensasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recompensas createManyAndReturn
   */
  export type RecompensasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * The data used to create many Recompensas.
     */
    data: RecompensasCreateManyInput | RecompensasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recompensas update
   */
  export type RecompensasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasInclude<ExtArgs> | null
    /**
     * The data needed to update a Recompensas.
     */
    data: XOR<RecompensasUpdateInput, RecompensasUncheckedUpdateInput>
    /**
     * Choose, which Recompensas to update.
     */
    where: RecompensasWhereUniqueInput
  }

  /**
   * Recompensas updateMany
   */
  export type RecompensasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recompensas.
     */
    data: XOR<RecompensasUpdateManyMutationInput, RecompensasUncheckedUpdateManyInput>
    /**
     * Filter which Recompensas to update
     */
    where?: RecompensasWhereInput
    /**
     * Limit how many Recompensas to update.
     */
    limit?: number
  }

  /**
   * Recompensas updateManyAndReturn
   */
  export type RecompensasUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * The data used to update Recompensas.
     */
    data: XOR<RecompensasUpdateManyMutationInput, RecompensasUncheckedUpdateManyInput>
    /**
     * Filter which Recompensas to update
     */
    where?: RecompensasWhereInput
    /**
     * Limit how many Recompensas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recompensas upsert
   */
  export type RecompensasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasInclude<ExtArgs> | null
    /**
     * The filter to search for the Recompensas to update in case it exists.
     */
    where: RecompensasWhereUniqueInput
    /**
     * In case the Recompensas found by the `where` argument doesn't exist, create a new Recompensas with this data.
     */
    create: XOR<RecompensasCreateInput, RecompensasUncheckedCreateInput>
    /**
     * In case the Recompensas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecompensasUpdateInput, RecompensasUncheckedUpdateInput>
  }

  /**
   * Recompensas delete
   */
  export type RecompensasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasInclude<ExtArgs> | null
    /**
     * Filter which Recompensas to delete.
     */
    where: RecompensasWhereUniqueInput
  }

  /**
   * Recompensas deleteMany
   */
  export type RecompensasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recompensas to delete
     */
    where?: RecompensasWhereInput
    /**
     * Limit how many Recompensas to delete.
     */
    limit?: number
  }

  /**
   * Recompensas.corrida
   */
  export type Recompensas$corridaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corridas
     */
    select?: CorridasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corridas
     */
    omit?: CorridasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorridasInclude<ExtArgs> | null
    where?: CorridasWhereInput
  }

  /**
   * Recompensas without action
   */
  export type RecompensasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recompensas
     */
    select?: RecompensasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recompensas
     */
    omit?: RecompensasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecompensasInclude<ExtArgs> | null
  }


  /**
   * Model Carteiras
   */

  export type AggregateCarteiras = {
    _count: CarteirasCountAggregateOutputType | null
    _avg: CarteirasAvgAggregateOutputType | null
    _sum: CarteirasSumAggregateOutputType | null
    _min: CarteirasMinAggregateOutputType | null
    _max: CarteirasMaxAggregateOutputType | null
  }

  export type CarteirasAvgAggregateOutputType = {
    saldo: number | null
  }

  export type CarteirasSumAggregateOutputType = {
    saldo: number | null
  }

  export type CarteirasMinAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    saldo: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarteirasMaxAggregateOutputType = {
    id: string | null
    usuarioId: string | null
    saldo: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarteirasCountAggregateOutputType = {
    id: number
    usuarioId: number
    saldo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CarteirasAvgAggregateInputType = {
    saldo?: true
  }

  export type CarteirasSumAggregateInputType = {
    saldo?: true
  }

  export type CarteirasMinAggregateInputType = {
    id?: true
    usuarioId?: true
    saldo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarteirasMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    saldo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarteirasCountAggregateInputType = {
    id?: true
    usuarioId?: true
    saldo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CarteirasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carteiras to aggregate.
     */
    where?: CarteirasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carteiras to fetch.
     */
    orderBy?: CarteirasOrderByWithRelationInput | CarteirasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarteirasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carteiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carteiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carteiras
    **/
    _count?: true | CarteirasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarteirasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarteirasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarteirasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarteirasMaxAggregateInputType
  }

  export type GetCarteirasAggregateType<T extends CarteirasAggregateArgs> = {
        [P in keyof T & keyof AggregateCarteiras]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarteiras[P]>
      : GetScalarType<T[P], AggregateCarteiras[P]>
  }




  export type CarteirasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarteirasWhereInput
    orderBy?: CarteirasOrderByWithAggregationInput | CarteirasOrderByWithAggregationInput[]
    by: CarteirasScalarFieldEnum[] | CarteirasScalarFieldEnum
    having?: CarteirasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarteirasCountAggregateInputType | true
    _avg?: CarteirasAvgAggregateInputType
    _sum?: CarteirasSumAggregateInputType
    _min?: CarteirasMinAggregateInputType
    _max?: CarteirasMaxAggregateInputType
  }

  export type CarteirasGroupByOutputType = {
    id: string
    usuarioId: string
    saldo: number
    createdAt: Date
    updatedAt: Date
    _count: CarteirasCountAggregateOutputType | null
    _avg: CarteirasAvgAggregateOutputType | null
    _sum: CarteirasSumAggregateOutputType | null
    _min: CarteirasMinAggregateOutputType | null
    _max: CarteirasMaxAggregateOutputType | null
  }

  type GetCarteirasGroupByPayload<T extends CarteirasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarteirasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarteirasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarteirasGroupByOutputType[P]>
            : GetScalarType<T[P], CarteirasGroupByOutputType[P]>
        }
      >
    >


  export type CarteirasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    saldo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carteiras"]>

  export type CarteirasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    saldo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carteiras"]>

  export type CarteirasSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    saldo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carteiras"]>

  export type CarteirasSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    saldo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CarteirasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usuarioId" | "saldo" | "createdAt" | "updatedAt", ExtArgs["result"]["carteiras"]>
  export type CarteirasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
  }
  export type CarteirasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
  }
  export type CarteirasIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuariosDefaultArgs<ExtArgs>
  }

  export type $CarteirasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Carteiras"
    objects: {
      usuario: Prisma.$UsuariosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      usuarioId: string
      saldo: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["carteiras"]>
    composites: {}
  }

  type CarteirasGetPayload<S extends boolean | null | undefined | CarteirasDefaultArgs> = $Result.GetResult<Prisma.$CarteirasPayload, S>

  type CarteirasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CarteirasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CarteirasCountAggregateInputType | true
    }

  export interface CarteirasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Carteiras'], meta: { name: 'Carteiras' } }
    /**
     * Find zero or one Carteiras that matches the filter.
     * @param {CarteirasFindUniqueArgs} args - Arguments to find a Carteiras
     * @example
     * // Get one Carteiras
     * const carteiras = await prisma.carteiras.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CarteirasFindUniqueArgs>(args: SelectSubset<T, CarteirasFindUniqueArgs<ExtArgs>>): Prisma__CarteirasClient<$Result.GetResult<Prisma.$CarteirasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Carteiras that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CarteirasFindUniqueOrThrowArgs} args - Arguments to find a Carteiras
     * @example
     * // Get one Carteiras
     * const carteiras = await prisma.carteiras.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CarteirasFindUniqueOrThrowArgs>(args: SelectSubset<T, CarteirasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CarteirasClient<$Result.GetResult<Prisma.$CarteirasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Carteiras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteirasFindFirstArgs} args - Arguments to find a Carteiras
     * @example
     * // Get one Carteiras
     * const carteiras = await prisma.carteiras.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CarteirasFindFirstArgs>(args?: SelectSubset<T, CarteirasFindFirstArgs<ExtArgs>>): Prisma__CarteirasClient<$Result.GetResult<Prisma.$CarteirasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Carteiras that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteirasFindFirstOrThrowArgs} args - Arguments to find a Carteiras
     * @example
     * // Get one Carteiras
     * const carteiras = await prisma.carteiras.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CarteirasFindFirstOrThrowArgs>(args?: SelectSubset<T, CarteirasFindFirstOrThrowArgs<ExtArgs>>): Prisma__CarteirasClient<$Result.GetResult<Prisma.$CarteirasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Carteiras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteirasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carteiras
     * const carteiras = await prisma.carteiras.findMany()
     * 
     * // Get first 10 Carteiras
     * const carteiras = await prisma.carteiras.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carteirasWithIdOnly = await prisma.carteiras.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CarteirasFindManyArgs>(args?: SelectSubset<T, CarteirasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarteirasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Carteiras.
     * @param {CarteirasCreateArgs} args - Arguments to create a Carteiras.
     * @example
     * // Create one Carteiras
     * const Carteiras = await prisma.carteiras.create({
     *   data: {
     *     // ... data to create a Carteiras
     *   }
     * })
     * 
     */
    create<T extends CarteirasCreateArgs>(args: SelectSubset<T, CarteirasCreateArgs<ExtArgs>>): Prisma__CarteirasClient<$Result.GetResult<Prisma.$CarteirasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Carteiras.
     * @param {CarteirasCreateManyArgs} args - Arguments to create many Carteiras.
     * @example
     * // Create many Carteiras
     * const carteiras = await prisma.carteiras.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CarteirasCreateManyArgs>(args?: SelectSubset<T, CarteirasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Carteiras and returns the data saved in the database.
     * @param {CarteirasCreateManyAndReturnArgs} args - Arguments to create many Carteiras.
     * @example
     * // Create many Carteiras
     * const carteiras = await prisma.carteiras.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Carteiras and only return the `id`
     * const carteirasWithIdOnly = await prisma.carteiras.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CarteirasCreateManyAndReturnArgs>(args?: SelectSubset<T, CarteirasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarteirasPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Carteiras.
     * @param {CarteirasDeleteArgs} args - Arguments to delete one Carteiras.
     * @example
     * // Delete one Carteiras
     * const Carteiras = await prisma.carteiras.delete({
     *   where: {
     *     // ... filter to delete one Carteiras
     *   }
     * })
     * 
     */
    delete<T extends CarteirasDeleteArgs>(args: SelectSubset<T, CarteirasDeleteArgs<ExtArgs>>): Prisma__CarteirasClient<$Result.GetResult<Prisma.$CarteirasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Carteiras.
     * @param {CarteirasUpdateArgs} args - Arguments to update one Carteiras.
     * @example
     * // Update one Carteiras
     * const carteiras = await prisma.carteiras.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CarteirasUpdateArgs>(args: SelectSubset<T, CarteirasUpdateArgs<ExtArgs>>): Prisma__CarteirasClient<$Result.GetResult<Prisma.$CarteirasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Carteiras.
     * @param {CarteirasDeleteManyArgs} args - Arguments to filter Carteiras to delete.
     * @example
     * // Delete a few Carteiras
     * const { count } = await prisma.carteiras.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CarteirasDeleteManyArgs>(args?: SelectSubset<T, CarteirasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carteiras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteirasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carteiras
     * const carteiras = await prisma.carteiras.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CarteirasUpdateManyArgs>(args: SelectSubset<T, CarteirasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carteiras and returns the data updated in the database.
     * @param {CarteirasUpdateManyAndReturnArgs} args - Arguments to update many Carteiras.
     * @example
     * // Update many Carteiras
     * const carteiras = await prisma.carteiras.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Carteiras and only return the `id`
     * const carteirasWithIdOnly = await prisma.carteiras.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CarteirasUpdateManyAndReturnArgs>(args: SelectSubset<T, CarteirasUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarteirasPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Carteiras.
     * @param {CarteirasUpsertArgs} args - Arguments to update or create a Carteiras.
     * @example
     * // Update or create a Carteiras
     * const carteiras = await prisma.carteiras.upsert({
     *   create: {
     *     // ... data to create a Carteiras
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Carteiras we want to update
     *   }
     * })
     */
    upsert<T extends CarteirasUpsertArgs>(args: SelectSubset<T, CarteirasUpsertArgs<ExtArgs>>): Prisma__CarteirasClient<$Result.GetResult<Prisma.$CarteirasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Carteiras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteirasCountArgs} args - Arguments to filter Carteiras to count.
     * @example
     * // Count the number of Carteiras
     * const count = await prisma.carteiras.count({
     *   where: {
     *     // ... the filter for the Carteiras we want to count
     *   }
     * })
    **/
    count<T extends CarteirasCountArgs>(
      args?: Subset<T, CarteirasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarteirasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Carteiras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteirasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarteirasAggregateArgs>(args: Subset<T, CarteirasAggregateArgs>): Prisma.PrismaPromise<GetCarteirasAggregateType<T>>

    /**
     * Group by Carteiras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarteirasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarteirasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarteirasGroupByArgs['orderBy'] }
        : { orderBy?: CarteirasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarteirasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarteirasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Carteiras model
   */
  readonly fields: CarteirasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Carteiras.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CarteirasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuariosDefaultArgs<ExtArgs>>): Prisma__UsuariosClient<$Result.GetResult<Prisma.$UsuariosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Carteiras model
   */
  interface CarteirasFieldRefs {
    readonly id: FieldRef<"Carteiras", 'String'>
    readonly usuarioId: FieldRef<"Carteiras", 'String'>
    readonly saldo: FieldRef<"Carteiras", 'Float'>
    readonly createdAt: FieldRef<"Carteiras", 'DateTime'>
    readonly updatedAt: FieldRef<"Carteiras", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Carteiras findUnique
   */
  export type CarteirasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carteiras
     */
    select?: CarteirasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carteiras
     */
    omit?: CarteirasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteirasInclude<ExtArgs> | null
    /**
     * Filter, which Carteiras to fetch.
     */
    where: CarteirasWhereUniqueInput
  }

  /**
   * Carteiras findUniqueOrThrow
   */
  export type CarteirasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carteiras
     */
    select?: CarteirasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carteiras
     */
    omit?: CarteirasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteirasInclude<ExtArgs> | null
    /**
     * Filter, which Carteiras to fetch.
     */
    where: CarteirasWhereUniqueInput
  }

  /**
   * Carteiras findFirst
   */
  export type CarteirasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carteiras
     */
    select?: CarteirasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carteiras
     */
    omit?: CarteirasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteirasInclude<ExtArgs> | null
    /**
     * Filter, which Carteiras to fetch.
     */
    where?: CarteirasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carteiras to fetch.
     */
    orderBy?: CarteirasOrderByWithRelationInput | CarteirasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carteiras.
     */
    cursor?: CarteirasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carteiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carteiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carteiras.
     */
    distinct?: CarteirasScalarFieldEnum | CarteirasScalarFieldEnum[]
  }

  /**
   * Carteiras findFirstOrThrow
   */
  export type CarteirasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carteiras
     */
    select?: CarteirasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carteiras
     */
    omit?: CarteirasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteirasInclude<ExtArgs> | null
    /**
     * Filter, which Carteiras to fetch.
     */
    where?: CarteirasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carteiras to fetch.
     */
    orderBy?: CarteirasOrderByWithRelationInput | CarteirasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carteiras.
     */
    cursor?: CarteirasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carteiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carteiras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carteiras.
     */
    distinct?: CarteirasScalarFieldEnum | CarteirasScalarFieldEnum[]
  }

  /**
   * Carteiras findMany
   */
  export type CarteirasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carteiras
     */
    select?: CarteirasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carteiras
     */
    omit?: CarteirasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteirasInclude<ExtArgs> | null
    /**
     * Filter, which Carteiras to fetch.
     */
    where?: CarteirasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carteiras to fetch.
     */
    orderBy?: CarteirasOrderByWithRelationInput | CarteirasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carteiras.
     */
    cursor?: CarteirasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carteiras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carteiras.
     */
    skip?: number
    distinct?: CarteirasScalarFieldEnum | CarteirasScalarFieldEnum[]
  }

  /**
   * Carteiras create
   */
  export type CarteirasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carteiras
     */
    select?: CarteirasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carteiras
     */
    omit?: CarteirasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteirasInclude<ExtArgs> | null
    /**
     * The data needed to create a Carteiras.
     */
    data: XOR<CarteirasCreateInput, CarteirasUncheckedCreateInput>
  }

  /**
   * Carteiras createMany
   */
  export type CarteirasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Carteiras.
     */
    data: CarteirasCreateManyInput | CarteirasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Carteiras createManyAndReturn
   */
  export type CarteirasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carteiras
     */
    select?: CarteirasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Carteiras
     */
    omit?: CarteirasOmit<ExtArgs> | null
    /**
     * The data used to create many Carteiras.
     */
    data: CarteirasCreateManyInput | CarteirasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteirasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Carteiras update
   */
  export type CarteirasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carteiras
     */
    select?: CarteirasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carteiras
     */
    omit?: CarteirasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteirasInclude<ExtArgs> | null
    /**
     * The data needed to update a Carteiras.
     */
    data: XOR<CarteirasUpdateInput, CarteirasUncheckedUpdateInput>
    /**
     * Choose, which Carteiras to update.
     */
    where: CarteirasWhereUniqueInput
  }

  /**
   * Carteiras updateMany
   */
  export type CarteirasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Carteiras.
     */
    data: XOR<CarteirasUpdateManyMutationInput, CarteirasUncheckedUpdateManyInput>
    /**
     * Filter which Carteiras to update
     */
    where?: CarteirasWhereInput
    /**
     * Limit how many Carteiras to update.
     */
    limit?: number
  }

  /**
   * Carteiras updateManyAndReturn
   */
  export type CarteirasUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carteiras
     */
    select?: CarteirasSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Carteiras
     */
    omit?: CarteirasOmit<ExtArgs> | null
    /**
     * The data used to update Carteiras.
     */
    data: XOR<CarteirasUpdateManyMutationInput, CarteirasUncheckedUpdateManyInput>
    /**
     * Filter which Carteiras to update
     */
    where?: CarteirasWhereInput
    /**
     * Limit how many Carteiras to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteirasIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Carteiras upsert
   */
  export type CarteirasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carteiras
     */
    select?: CarteirasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carteiras
     */
    omit?: CarteirasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteirasInclude<ExtArgs> | null
    /**
     * The filter to search for the Carteiras to update in case it exists.
     */
    where: CarteirasWhereUniqueInput
    /**
     * In case the Carteiras found by the `where` argument doesn't exist, create a new Carteiras with this data.
     */
    create: XOR<CarteirasCreateInput, CarteirasUncheckedCreateInput>
    /**
     * In case the Carteiras was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarteirasUpdateInput, CarteirasUncheckedUpdateInput>
  }

  /**
   * Carteiras delete
   */
  export type CarteirasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carteiras
     */
    select?: CarteirasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carteiras
     */
    omit?: CarteirasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteirasInclude<ExtArgs> | null
    /**
     * Filter which Carteiras to delete.
     */
    where: CarteirasWhereUniqueInput
  }

  /**
   * Carteiras deleteMany
   */
  export type CarteirasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carteiras to delete
     */
    where?: CarteirasWhereInput
    /**
     * Limit how many Carteiras to delete.
     */
    limit?: number
  }

  /**
   * Carteiras without action
   */
  export type CarteirasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carteiras
     */
    select?: CarteirasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carteiras
     */
    omit?: CarteirasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarteirasInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuariosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    cpf: 'cpf',
    celular: 'celular',
    endereco: 'endereco',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  export const CorridasScalarFieldEnum: {
    id: 'id',
    passageiroId: 'passageiroId',
    motoristaId: 'motoristaId',
    dataHora: 'dataHora',
    localInicio: 'localInicio',
    localFim: 'localFim',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CorridasScalarFieldEnum = (typeof CorridasScalarFieldEnum)[keyof typeof CorridasScalarFieldEnum]


  export const RecompensasScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    corridaId: 'corridaId',
    valor: 'valor',
    tipo: 'tipo',
    data: 'data',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RecompensasScalarFieldEnum = (typeof RecompensasScalarFieldEnum)[keyof typeof RecompensasScalarFieldEnum]


  export const CarteirasScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    saldo: 'saldo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CarteirasScalarFieldEnum = (typeof CarteirasScalarFieldEnum)[keyof typeof CarteirasScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuariosWhereInput = {
    AND?: UsuariosWhereInput | UsuariosWhereInput[]
    OR?: UsuariosWhereInput[]
    NOT?: UsuariosWhereInput | UsuariosWhereInput[]
    id?: StringFilter<"Usuarios"> | string
    nome?: StringFilter<"Usuarios"> | string
    email?: StringFilter<"Usuarios"> | string
    senha?: StringFilter<"Usuarios"> | string
    cpf?: StringFilter<"Usuarios"> | string
    celular?: StringFilter<"Usuarios"> | string
    endereco?: StringNullableFilter<"Usuarios"> | string | null
    createdAt?: DateTimeFilter<"Usuarios"> | Date | string
    updatedAt?: DateTimeFilter<"Usuarios"> | Date | string
    Carteiras?: CarteirasListRelationFilter
    CorridasComoPassageiro?: CorridasListRelationFilter
    CorridasComoMotorista?: CorridasListRelationFilter
    Recompensas?: RecompensasListRelationFilter
  }

  export type UsuariosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    endereco?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Carteiras?: CarteirasOrderByRelationAggregateInput
    CorridasComoPassageiro?: CorridasOrderByRelationAggregateInput
    CorridasComoMotorista?: CorridasOrderByRelationAggregateInput
    Recompensas?: RecompensasOrderByRelationAggregateInput
  }

  export type UsuariosWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    cpf?: string
    AND?: UsuariosWhereInput | UsuariosWhereInput[]
    OR?: UsuariosWhereInput[]
    NOT?: UsuariosWhereInput | UsuariosWhereInput[]
    nome?: StringFilter<"Usuarios"> | string
    senha?: StringFilter<"Usuarios"> | string
    celular?: StringFilter<"Usuarios"> | string
    endereco?: StringNullableFilter<"Usuarios"> | string | null
    createdAt?: DateTimeFilter<"Usuarios"> | Date | string
    updatedAt?: DateTimeFilter<"Usuarios"> | Date | string
    Carteiras?: CarteirasListRelationFilter
    CorridasComoPassageiro?: CorridasListRelationFilter
    CorridasComoMotorista?: CorridasListRelationFilter
    Recompensas?: RecompensasListRelationFilter
  }, "id" | "email" | "cpf">

  export type UsuariosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    endereco?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UsuariosCountOrderByAggregateInput
    _max?: UsuariosMaxOrderByAggregateInput
    _min?: UsuariosMinOrderByAggregateInput
  }

  export type UsuariosScalarWhereWithAggregatesInput = {
    AND?: UsuariosScalarWhereWithAggregatesInput | UsuariosScalarWhereWithAggregatesInput[]
    OR?: UsuariosScalarWhereWithAggregatesInput[]
    NOT?: UsuariosScalarWhereWithAggregatesInput | UsuariosScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Usuarios"> | string
    nome?: StringWithAggregatesFilter<"Usuarios"> | string
    email?: StringWithAggregatesFilter<"Usuarios"> | string
    senha?: StringWithAggregatesFilter<"Usuarios"> | string
    cpf?: StringWithAggregatesFilter<"Usuarios"> | string
    celular?: StringWithAggregatesFilter<"Usuarios"> | string
    endereco?: StringNullableWithAggregatesFilter<"Usuarios"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Usuarios"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Usuarios"> | Date | string
  }

  export type CorridasWhereInput = {
    AND?: CorridasWhereInput | CorridasWhereInput[]
    OR?: CorridasWhereInput[]
    NOT?: CorridasWhereInput | CorridasWhereInput[]
    id?: StringFilter<"Corridas"> | string
    passageiroId?: StringFilter<"Corridas"> | string
    motoristaId?: StringNullableFilter<"Corridas"> | string | null
    dataHora?: DateTimeFilter<"Corridas"> | Date | string
    localInicio?: StringFilter<"Corridas"> | string
    localFim?: StringFilter<"Corridas"> | string
    status?: StringFilter<"Corridas"> | string
    createdAt?: DateTimeFilter<"Corridas"> | Date | string
    updatedAt?: DateTimeFilter<"Corridas"> | Date | string
    passageiro?: XOR<UsuariosScalarRelationFilter, UsuariosWhereInput>
    motorista?: XOR<UsuariosNullableScalarRelationFilter, UsuariosWhereInput> | null
    Recompensas?: RecompensasListRelationFilter
  }

  export type CorridasOrderByWithRelationInput = {
    id?: SortOrder
    passageiroId?: SortOrder
    motoristaId?: SortOrderInput | SortOrder
    dataHora?: SortOrder
    localInicio?: SortOrder
    localFim?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passageiro?: UsuariosOrderByWithRelationInput
    motorista?: UsuariosOrderByWithRelationInput
    Recompensas?: RecompensasOrderByRelationAggregateInput
  }

  export type CorridasWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CorridasWhereInput | CorridasWhereInput[]
    OR?: CorridasWhereInput[]
    NOT?: CorridasWhereInput | CorridasWhereInput[]
    passageiroId?: StringFilter<"Corridas"> | string
    motoristaId?: StringNullableFilter<"Corridas"> | string | null
    dataHora?: DateTimeFilter<"Corridas"> | Date | string
    localInicio?: StringFilter<"Corridas"> | string
    localFim?: StringFilter<"Corridas"> | string
    status?: StringFilter<"Corridas"> | string
    createdAt?: DateTimeFilter<"Corridas"> | Date | string
    updatedAt?: DateTimeFilter<"Corridas"> | Date | string
    passageiro?: XOR<UsuariosScalarRelationFilter, UsuariosWhereInput>
    motorista?: XOR<UsuariosNullableScalarRelationFilter, UsuariosWhereInput> | null
    Recompensas?: RecompensasListRelationFilter
  }, "id">

  export type CorridasOrderByWithAggregationInput = {
    id?: SortOrder
    passageiroId?: SortOrder
    motoristaId?: SortOrderInput | SortOrder
    dataHora?: SortOrder
    localInicio?: SortOrder
    localFim?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CorridasCountOrderByAggregateInput
    _max?: CorridasMaxOrderByAggregateInput
    _min?: CorridasMinOrderByAggregateInput
  }

  export type CorridasScalarWhereWithAggregatesInput = {
    AND?: CorridasScalarWhereWithAggregatesInput | CorridasScalarWhereWithAggregatesInput[]
    OR?: CorridasScalarWhereWithAggregatesInput[]
    NOT?: CorridasScalarWhereWithAggregatesInput | CorridasScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Corridas"> | string
    passageiroId?: StringWithAggregatesFilter<"Corridas"> | string
    motoristaId?: StringNullableWithAggregatesFilter<"Corridas"> | string | null
    dataHora?: DateTimeWithAggregatesFilter<"Corridas"> | Date | string
    localInicio?: StringWithAggregatesFilter<"Corridas"> | string
    localFim?: StringWithAggregatesFilter<"Corridas"> | string
    status?: StringWithAggregatesFilter<"Corridas"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Corridas"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Corridas"> | Date | string
  }

  export type RecompensasWhereInput = {
    AND?: RecompensasWhereInput | RecompensasWhereInput[]
    OR?: RecompensasWhereInput[]
    NOT?: RecompensasWhereInput | RecompensasWhereInput[]
    id?: StringFilter<"Recompensas"> | string
    usuarioId?: StringFilter<"Recompensas"> | string
    corridaId?: StringNullableFilter<"Recompensas"> | string | null
    valor?: FloatFilter<"Recompensas"> | number
    tipo?: StringFilter<"Recompensas"> | string
    data?: DateTimeFilter<"Recompensas"> | Date | string
    createdAt?: DateTimeFilter<"Recompensas"> | Date | string
    updatedAt?: DateTimeFilter<"Recompensas"> | Date | string
    usuario?: XOR<UsuariosScalarRelationFilter, UsuariosWhereInput>
    corrida?: XOR<CorridasNullableScalarRelationFilter, CorridasWhereInput> | null
  }

  export type RecompensasOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    corridaId?: SortOrderInput | SortOrder
    valor?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usuario?: UsuariosOrderByWithRelationInput
    corrida?: CorridasOrderByWithRelationInput
  }

  export type RecompensasWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecompensasWhereInput | RecompensasWhereInput[]
    OR?: RecompensasWhereInput[]
    NOT?: RecompensasWhereInput | RecompensasWhereInput[]
    usuarioId?: StringFilter<"Recompensas"> | string
    corridaId?: StringNullableFilter<"Recompensas"> | string | null
    valor?: FloatFilter<"Recompensas"> | number
    tipo?: StringFilter<"Recompensas"> | string
    data?: DateTimeFilter<"Recompensas"> | Date | string
    createdAt?: DateTimeFilter<"Recompensas"> | Date | string
    updatedAt?: DateTimeFilter<"Recompensas"> | Date | string
    usuario?: XOR<UsuariosScalarRelationFilter, UsuariosWhereInput>
    corrida?: XOR<CorridasNullableScalarRelationFilter, CorridasWhereInput> | null
  }, "id">

  export type RecompensasOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    corridaId?: SortOrderInput | SortOrder
    valor?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RecompensasCountOrderByAggregateInput
    _avg?: RecompensasAvgOrderByAggregateInput
    _max?: RecompensasMaxOrderByAggregateInput
    _min?: RecompensasMinOrderByAggregateInput
    _sum?: RecompensasSumOrderByAggregateInput
  }

  export type RecompensasScalarWhereWithAggregatesInput = {
    AND?: RecompensasScalarWhereWithAggregatesInput | RecompensasScalarWhereWithAggregatesInput[]
    OR?: RecompensasScalarWhereWithAggregatesInput[]
    NOT?: RecompensasScalarWhereWithAggregatesInput | RecompensasScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recompensas"> | string
    usuarioId?: StringWithAggregatesFilter<"Recompensas"> | string
    corridaId?: StringNullableWithAggregatesFilter<"Recompensas"> | string | null
    valor?: FloatWithAggregatesFilter<"Recompensas"> | number
    tipo?: StringWithAggregatesFilter<"Recompensas"> | string
    data?: DateTimeWithAggregatesFilter<"Recompensas"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Recompensas"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Recompensas"> | Date | string
  }

  export type CarteirasWhereInput = {
    AND?: CarteirasWhereInput | CarteirasWhereInput[]
    OR?: CarteirasWhereInput[]
    NOT?: CarteirasWhereInput | CarteirasWhereInput[]
    id?: StringFilter<"Carteiras"> | string
    usuarioId?: StringFilter<"Carteiras"> | string
    saldo?: FloatFilter<"Carteiras"> | number
    createdAt?: DateTimeFilter<"Carteiras"> | Date | string
    updatedAt?: DateTimeFilter<"Carteiras"> | Date | string
    usuario?: XOR<UsuariosScalarRelationFilter, UsuariosWhereInput>
  }

  export type CarteirasOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    saldo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usuario?: UsuariosOrderByWithRelationInput
  }

  export type CarteirasWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    usuarioId?: string
    AND?: CarteirasWhereInput | CarteirasWhereInput[]
    OR?: CarteirasWhereInput[]
    NOT?: CarteirasWhereInput | CarteirasWhereInput[]
    saldo?: FloatFilter<"Carteiras"> | number
    createdAt?: DateTimeFilter<"Carteiras"> | Date | string
    updatedAt?: DateTimeFilter<"Carteiras"> | Date | string
    usuario?: XOR<UsuariosScalarRelationFilter, UsuariosWhereInput>
  }, "id" | "usuarioId">

  export type CarteirasOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    saldo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CarteirasCountOrderByAggregateInput
    _avg?: CarteirasAvgOrderByAggregateInput
    _max?: CarteirasMaxOrderByAggregateInput
    _min?: CarteirasMinOrderByAggregateInput
    _sum?: CarteirasSumOrderByAggregateInput
  }

  export type CarteirasScalarWhereWithAggregatesInput = {
    AND?: CarteirasScalarWhereWithAggregatesInput | CarteirasScalarWhereWithAggregatesInput[]
    OR?: CarteirasScalarWhereWithAggregatesInput[]
    NOT?: CarteirasScalarWhereWithAggregatesInput | CarteirasScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Carteiras"> | string
    usuarioId?: StringWithAggregatesFilter<"Carteiras"> | string
    saldo?: FloatWithAggregatesFilter<"Carteiras"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Carteiras"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Carteiras"> | Date | string
  }

  export type UsuariosCreateInput = {
    id?: string
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    endereco?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Carteiras?: CarteirasCreateNestedManyWithoutUsuarioInput
    CorridasComoPassageiro?: CorridasCreateNestedManyWithoutPassageiroInput
    CorridasComoMotorista?: CorridasCreateNestedManyWithoutMotoristaInput
    Recompensas?: RecompensasCreateNestedManyWithoutUsuarioInput
  }

  export type UsuariosUncheckedCreateInput = {
    id?: string
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    endereco?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Carteiras?: CarteirasUncheckedCreateNestedManyWithoutUsuarioInput
    CorridasComoPassageiro?: CorridasUncheckedCreateNestedManyWithoutPassageiroInput
    CorridasComoMotorista?: CorridasUncheckedCreateNestedManyWithoutMotoristaInput
    Recompensas?: RecompensasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuariosUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Carteiras?: CarteirasUpdateManyWithoutUsuarioNestedInput
    CorridasComoPassageiro?: CorridasUpdateManyWithoutPassageiroNestedInput
    CorridasComoMotorista?: CorridasUpdateManyWithoutMotoristaNestedInput
    Recompensas?: RecompensasUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuariosUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Carteiras?: CarteirasUncheckedUpdateManyWithoutUsuarioNestedInput
    CorridasComoPassageiro?: CorridasUncheckedUpdateManyWithoutPassageiroNestedInput
    CorridasComoMotorista?: CorridasUncheckedUpdateManyWithoutMotoristaNestedInput
    Recompensas?: RecompensasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuariosCreateManyInput = {
    id?: string
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    endereco?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsuariosUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuariosUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorridasCreateInput = {
    id?: string
    dataHora: Date | string
    localInicio: string
    localFim: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    passageiro: UsuariosCreateNestedOneWithoutCorridasComoPassageiroInput
    motorista?: UsuariosCreateNestedOneWithoutCorridasComoMotoristaInput
    Recompensas?: RecompensasCreateNestedManyWithoutCorridaInput
  }

  export type CorridasUncheckedCreateInput = {
    id?: string
    passageiroId: string
    motoristaId?: string | null
    dataHora: Date | string
    localInicio: string
    localFim: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Recompensas?: RecompensasUncheckedCreateNestedManyWithoutCorridaInput
  }

  export type CorridasUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataHora?: DateTimeFieldUpdateOperationsInput | Date | string
    localInicio?: StringFieldUpdateOperationsInput | string
    localFim?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passageiro?: UsuariosUpdateOneRequiredWithoutCorridasComoPassageiroNestedInput
    motorista?: UsuariosUpdateOneWithoutCorridasComoMotoristaNestedInput
    Recompensas?: RecompensasUpdateManyWithoutCorridaNestedInput
  }

  export type CorridasUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    passageiroId?: StringFieldUpdateOperationsInput | string
    motoristaId?: NullableStringFieldUpdateOperationsInput | string | null
    dataHora?: DateTimeFieldUpdateOperationsInput | Date | string
    localInicio?: StringFieldUpdateOperationsInput | string
    localFim?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Recompensas?: RecompensasUncheckedUpdateManyWithoutCorridaNestedInput
  }

  export type CorridasCreateManyInput = {
    id?: string
    passageiroId: string
    motoristaId?: string | null
    dataHora: Date | string
    localInicio: string
    localFim: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CorridasUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataHora?: DateTimeFieldUpdateOperationsInput | Date | string
    localInicio?: StringFieldUpdateOperationsInput | string
    localFim?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorridasUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    passageiroId?: StringFieldUpdateOperationsInput | string
    motoristaId?: NullableStringFieldUpdateOperationsInput | string | null
    dataHora?: DateTimeFieldUpdateOperationsInput | Date | string
    localInicio?: StringFieldUpdateOperationsInput | string
    localFim?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecompensasCreateInput = {
    id?: string
    valor: number
    tipo: string
    data: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    usuario: UsuariosCreateNestedOneWithoutRecompensasInput
    corrida?: CorridasCreateNestedOneWithoutRecompensasInput
  }

  export type RecompensasUncheckedCreateInput = {
    id?: string
    usuarioId: string
    corridaId?: string | null
    valor: number
    tipo: string
    data: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecompensasUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuariosUpdateOneRequiredWithoutRecompensasNestedInput
    corrida?: CorridasUpdateOneWithoutRecompensasNestedInput
  }

  export type RecompensasUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    corridaId?: NullableStringFieldUpdateOperationsInput | string | null
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecompensasCreateManyInput = {
    id?: string
    usuarioId: string
    corridaId?: string | null
    valor: number
    tipo: string
    data: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecompensasUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecompensasUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    corridaId?: NullableStringFieldUpdateOperationsInput | string | null
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarteirasCreateInput = {
    id?: string
    saldo?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    usuario: UsuariosCreateNestedOneWithoutCarteirasInput
  }

  export type CarteirasUncheckedCreateInput = {
    id?: string
    usuarioId: string
    saldo?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarteirasUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuariosUpdateOneRequiredWithoutCarteirasNestedInput
  }

  export type CarteirasUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarteirasCreateManyInput = {
    id?: string
    usuarioId: string
    saldo?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarteirasUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarteirasUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CarteirasListRelationFilter = {
    every?: CarteirasWhereInput
    some?: CarteirasWhereInput
    none?: CarteirasWhereInput
  }

  export type CorridasListRelationFilter = {
    every?: CorridasWhereInput
    some?: CorridasWhereInput
    none?: CorridasWhereInput
  }

  export type RecompensasListRelationFilter = {
    every?: RecompensasWhereInput
    some?: RecompensasWhereInput
    none?: RecompensasWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CarteirasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CorridasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecompensasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuariosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    endereco?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsuariosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    endereco?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsuariosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    cpf?: SortOrder
    celular?: SortOrder
    endereco?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UsuariosScalarRelationFilter = {
    is?: UsuariosWhereInput
    isNot?: UsuariosWhereInput
  }

  export type UsuariosNullableScalarRelationFilter = {
    is?: UsuariosWhereInput | null
    isNot?: UsuariosWhereInput | null
  }

  export type CorridasCountOrderByAggregateInput = {
    id?: SortOrder
    passageiroId?: SortOrder
    motoristaId?: SortOrder
    dataHora?: SortOrder
    localInicio?: SortOrder
    localFim?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CorridasMaxOrderByAggregateInput = {
    id?: SortOrder
    passageiroId?: SortOrder
    motoristaId?: SortOrder
    dataHora?: SortOrder
    localInicio?: SortOrder
    localFim?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CorridasMinOrderByAggregateInput = {
    id?: SortOrder
    passageiroId?: SortOrder
    motoristaId?: SortOrder
    dataHora?: SortOrder
    localInicio?: SortOrder
    localFim?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CorridasNullableScalarRelationFilter = {
    is?: CorridasWhereInput | null
    isNot?: CorridasWhereInput | null
  }

  export type RecompensasCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    corridaId?: SortOrder
    valor?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecompensasAvgOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type RecompensasMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    corridaId?: SortOrder
    valor?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecompensasMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    corridaId?: SortOrder
    valor?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecompensasSumOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CarteirasCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    saldo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarteirasAvgOrderByAggregateInput = {
    saldo?: SortOrder
  }

  export type CarteirasMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    saldo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarteirasMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    saldo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarteirasSumOrderByAggregateInput = {
    saldo?: SortOrder
  }

  export type CarteirasCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CarteirasCreateWithoutUsuarioInput, CarteirasUncheckedCreateWithoutUsuarioInput> | CarteirasCreateWithoutUsuarioInput[] | CarteirasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CarteirasCreateOrConnectWithoutUsuarioInput | CarteirasCreateOrConnectWithoutUsuarioInput[]
    createMany?: CarteirasCreateManyUsuarioInputEnvelope
    connect?: CarteirasWhereUniqueInput | CarteirasWhereUniqueInput[]
  }

  export type CorridasCreateNestedManyWithoutPassageiroInput = {
    create?: XOR<CorridasCreateWithoutPassageiroInput, CorridasUncheckedCreateWithoutPassageiroInput> | CorridasCreateWithoutPassageiroInput[] | CorridasUncheckedCreateWithoutPassageiroInput[]
    connectOrCreate?: CorridasCreateOrConnectWithoutPassageiroInput | CorridasCreateOrConnectWithoutPassageiroInput[]
    createMany?: CorridasCreateManyPassageiroInputEnvelope
    connect?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
  }

  export type CorridasCreateNestedManyWithoutMotoristaInput = {
    create?: XOR<CorridasCreateWithoutMotoristaInput, CorridasUncheckedCreateWithoutMotoristaInput> | CorridasCreateWithoutMotoristaInput[] | CorridasUncheckedCreateWithoutMotoristaInput[]
    connectOrCreate?: CorridasCreateOrConnectWithoutMotoristaInput | CorridasCreateOrConnectWithoutMotoristaInput[]
    createMany?: CorridasCreateManyMotoristaInputEnvelope
    connect?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
  }

  export type RecompensasCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RecompensasCreateWithoutUsuarioInput, RecompensasUncheckedCreateWithoutUsuarioInput> | RecompensasCreateWithoutUsuarioInput[] | RecompensasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RecompensasCreateOrConnectWithoutUsuarioInput | RecompensasCreateOrConnectWithoutUsuarioInput[]
    createMany?: RecompensasCreateManyUsuarioInputEnvelope
    connect?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
  }

  export type CarteirasUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CarteirasCreateWithoutUsuarioInput, CarteirasUncheckedCreateWithoutUsuarioInput> | CarteirasCreateWithoutUsuarioInput[] | CarteirasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CarteirasCreateOrConnectWithoutUsuarioInput | CarteirasCreateOrConnectWithoutUsuarioInput[]
    createMany?: CarteirasCreateManyUsuarioInputEnvelope
    connect?: CarteirasWhereUniqueInput | CarteirasWhereUniqueInput[]
  }

  export type CorridasUncheckedCreateNestedManyWithoutPassageiroInput = {
    create?: XOR<CorridasCreateWithoutPassageiroInput, CorridasUncheckedCreateWithoutPassageiroInput> | CorridasCreateWithoutPassageiroInput[] | CorridasUncheckedCreateWithoutPassageiroInput[]
    connectOrCreate?: CorridasCreateOrConnectWithoutPassageiroInput | CorridasCreateOrConnectWithoutPassageiroInput[]
    createMany?: CorridasCreateManyPassageiroInputEnvelope
    connect?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
  }

  export type CorridasUncheckedCreateNestedManyWithoutMotoristaInput = {
    create?: XOR<CorridasCreateWithoutMotoristaInput, CorridasUncheckedCreateWithoutMotoristaInput> | CorridasCreateWithoutMotoristaInput[] | CorridasUncheckedCreateWithoutMotoristaInput[]
    connectOrCreate?: CorridasCreateOrConnectWithoutMotoristaInput | CorridasCreateOrConnectWithoutMotoristaInput[]
    createMany?: CorridasCreateManyMotoristaInputEnvelope
    connect?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
  }

  export type RecompensasUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RecompensasCreateWithoutUsuarioInput, RecompensasUncheckedCreateWithoutUsuarioInput> | RecompensasCreateWithoutUsuarioInput[] | RecompensasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RecompensasCreateOrConnectWithoutUsuarioInput | RecompensasCreateOrConnectWithoutUsuarioInput[]
    createMany?: RecompensasCreateManyUsuarioInputEnvelope
    connect?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CarteirasUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CarteirasCreateWithoutUsuarioInput, CarteirasUncheckedCreateWithoutUsuarioInput> | CarteirasCreateWithoutUsuarioInput[] | CarteirasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CarteirasCreateOrConnectWithoutUsuarioInput | CarteirasCreateOrConnectWithoutUsuarioInput[]
    upsert?: CarteirasUpsertWithWhereUniqueWithoutUsuarioInput | CarteirasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CarteirasCreateManyUsuarioInputEnvelope
    set?: CarteirasWhereUniqueInput | CarteirasWhereUniqueInput[]
    disconnect?: CarteirasWhereUniqueInput | CarteirasWhereUniqueInput[]
    delete?: CarteirasWhereUniqueInput | CarteirasWhereUniqueInput[]
    connect?: CarteirasWhereUniqueInput | CarteirasWhereUniqueInput[]
    update?: CarteirasUpdateWithWhereUniqueWithoutUsuarioInput | CarteirasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CarteirasUpdateManyWithWhereWithoutUsuarioInput | CarteirasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CarteirasScalarWhereInput | CarteirasScalarWhereInput[]
  }

  export type CorridasUpdateManyWithoutPassageiroNestedInput = {
    create?: XOR<CorridasCreateWithoutPassageiroInput, CorridasUncheckedCreateWithoutPassageiroInput> | CorridasCreateWithoutPassageiroInput[] | CorridasUncheckedCreateWithoutPassageiroInput[]
    connectOrCreate?: CorridasCreateOrConnectWithoutPassageiroInput | CorridasCreateOrConnectWithoutPassageiroInput[]
    upsert?: CorridasUpsertWithWhereUniqueWithoutPassageiroInput | CorridasUpsertWithWhereUniqueWithoutPassageiroInput[]
    createMany?: CorridasCreateManyPassageiroInputEnvelope
    set?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    disconnect?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    delete?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    connect?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    update?: CorridasUpdateWithWhereUniqueWithoutPassageiroInput | CorridasUpdateWithWhereUniqueWithoutPassageiroInput[]
    updateMany?: CorridasUpdateManyWithWhereWithoutPassageiroInput | CorridasUpdateManyWithWhereWithoutPassageiroInput[]
    deleteMany?: CorridasScalarWhereInput | CorridasScalarWhereInput[]
  }

  export type CorridasUpdateManyWithoutMotoristaNestedInput = {
    create?: XOR<CorridasCreateWithoutMotoristaInput, CorridasUncheckedCreateWithoutMotoristaInput> | CorridasCreateWithoutMotoristaInput[] | CorridasUncheckedCreateWithoutMotoristaInput[]
    connectOrCreate?: CorridasCreateOrConnectWithoutMotoristaInput | CorridasCreateOrConnectWithoutMotoristaInput[]
    upsert?: CorridasUpsertWithWhereUniqueWithoutMotoristaInput | CorridasUpsertWithWhereUniqueWithoutMotoristaInput[]
    createMany?: CorridasCreateManyMotoristaInputEnvelope
    set?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    disconnect?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    delete?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    connect?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    update?: CorridasUpdateWithWhereUniqueWithoutMotoristaInput | CorridasUpdateWithWhereUniqueWithoutMotoristaInput[]
    updateMany?: CorridasUpdateManyWithWhereWithoutMotoristaInput | CorridasUpdateManyWithWhereWithoutMotoristaInput[]
    deleteMany?: CorridasScalarWhereInput | CorridasScalarWhereInput[]
  }

  export type RecompensasUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RecompensasCreateWithoutUsuarioInput, RecompensasUncheckedCreateWithoutUsuarioInput> | RecompensasCreateWithoutUsuarioInput[] | RecompensasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RecompensasCreateOrConnectWithoutUsuarioInput | RecompensasCreateOrConnectWithoutUsuarioInput[]
    upsert?: RecompensasUpsertWithWhereUniqueWithoutUsuarioInput | RecompensasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RecompensasCreateManyUsuarioInputEnvelope
    set?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    disconnect?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    delete?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    connect?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    update?: RecompensasUpdateWithWhereUniqueWithoutUsuarioInput | RecompensasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RecompensasUpdateManyWithWhereWithoutUsuarioInput | RecompensasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RecompensasScalarWhereInput | RecompensasScalarWhereInput[]
  }

  export type CarteirasUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CarteirasCreateWithoutUsuarioInput, CarteirasUncheckedCreateWithoutUsuarioInput> | CarteirasCreateWithoutUsuarioInput[] | CarteirasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CarteirasCreateOrConnectWithoutUsuarioInput | CarteirasCreateOrConnectWithoutUsuarioInput[]
    upsert?: CarteirasUpsertWithWhereUniqueWithoutUsuarioInput | CarteirasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CarteirasCreateManyUsuarioInputEnvelope
    set?: CarteirasWhereUniqueInput | CarteirasWhereUniqueInput[]
    disconnect?: CarteirasWhereUniqueInput | CarteirasWhereUniqueInput[]
    delete?: CarteirasWhereUniqueInput | CarteirasWhereUniqueInput[]
    connect?: CarteirasWhereUniqueInput | CarteirasWhereUniqueInput[]
    update?: CarteirasUpdateWithWhereUniqueWithoutUsuarioInput | CarteirasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CarteirasUpdateManyWithWhereWithoutUsuarioInput | CarteirasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CarteirasScalarWhereInput | CarteirasScalarWhereInput[]
  }

  export type CorridasUncheckedUpdateManyWithoutPassageiroNestedInput = {
    create?: XOR<CorridasCreateWithoutPassageiroInput, CorridasUncheckedCreateWithoutPassageiroInput> | CorridasCreateWithoutPassageiroInput[] | CorridasUncheckedCreateWithoutPassageiroInput[]
    connectOrCreate?: CorridasCreateOrConnectWithoutPassageiroInput | CorridasCreateOrConnectWithoutPassageiroInput[]
    upsert?: CorridasUpsertWithWhereUniqueWithoutPassageiroInput | CorridasUpsertWithWhereUniqueWithoutPassageiroInput[]
    createMany?: CorridasCreateManyPassageiroInputEnvelope
    set?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    disconnect?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    delete?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    connect?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    update?: CorridasUpdateWithWhereUniqueWithoutPassageiroInput | CorridasUpdateWithWhereUniqueWithoutPassageiroInput[]
    updateMany?: CorridasUpdateManyWithWhereWithoutPassageiroInput | CorridasUpdateManyWithWhereWithoutPassageiroInput[]
    deleteMany?: CorridasScalarWhereInput | CorridasScalarWhereInput[]
  }

  export type CorridasUncheckedUpdateManyWithoutMotoristaNestedInput = {
    create?: XOR<CorridasCreateWithoutMotoristaInput, CorridasUncheckedCreateWithoutMotoristaInput> | CorridasCreateWithoutMotoristaInput[] | CorridasUncheckedCreateWithoutMotoristaInput[]
    connectOrCreate?: CorridasCreateOrConnectWithoutMotoristaInput | CorridasCreateOrConnectWithoutMotoristaInput[]
    upsert?: CorridasUpsertWithWhereUniqueWithoutMotoristaInput | CorridasUpsertWithWhereUniqueWithoutMotoristaInput[]
    createMany?: CorridasCreateManyMotoristaInputEnvelope
    set?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    disconnect?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    delete?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    connect?: CorridasWhereUniqueInput | CorridasWhereUniqueInput[]
    update?: CorridasUpdateWithWhereUniqueWithoutMotoristaInput | CorridasUpdateWithWhereUniqueWithoutMotoristaInput[]
    updateMany?: CorridasUpdateManyWithWhereWithoutMotoristaInput | CorridasUpdateManyWithWhereWithoutMotoristaInput[]
    deleteMany?: CorridasScalarWhereInput | CorridasScalarWhereInput[]
  }

  export type RecompensasUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RecompensasCreateWithoutUsuarioInput, RecompensasUncheckedCreateWithoutUsuarioInput> | RecompensasCreateWithoutUsuarioInput[] | RecompensasUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RecompensasCreateOrConnectWithoutUsuarioInput | RecompensasCreateOrConnectWithoutUsuarioInput[]
    upsert?: RecompensasUpsertWithWhereUniqueWithoutUsuarioInput | RecompensasUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RecompensasCreateManyUsuarioInputEnvelope
    set?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    disconnect?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    delete?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    connect?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    update?: RecompensasUpdateWithWhereUniqueWithoutUsuarioInput | RecompensasUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RecompensasUpdateManyWithWhereWithoutUsuarioInput | RecompensasUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RecompensasScalarWhereInput | RecompensasScalarWhereInput[]
  }

  export type UsuariosCreateNestedOneWithoutCorridasComoPassageiroInput = {
    create?: XOR<UsuariosCreateWithoutCorridasComoPassageiroInput, UsuariosUncheckedCreateWithoutCorridasComoPassageiroInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutCorridasComoPassageiroInput
    connect?: UsuariosWhereUniqueInput
  }

  export type UsuariosCreateNestedOneWithoutCorridasComoMotoristaInput = {
    create?: XOR<UsuariosCreateWithoutCorridasComoMotoristaInput, UsuariosUncheckedCreateWithoutCorridasComoMotoristaInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutCorridasComoMotoristaInput
    connect?: UsuariosWhereUniqueInput
  }

  export type RecompensasCreateNestedManyWithoutCorridaInput = {
    create?: XOR<RecompensasCreateWithoutCorridaInput, RecompensasUncheckedCreateWithoutCorridaInput> | RecompensasCreateWithoutCorridaInput[] | RecompensasUncheckedCreateWithoutCorridaInput[]
    connectOrCreate?: RecompensasCreateOrConnectWithoutCorridaInput | RecompensasCreateOrConnectWithoutCorridaInput[]
    createMany?: RecompensasCreateManyCorridaInputEnvelope
    connect?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
  }

  export type RecompensasUncheckedCreateNestedManyWithoutCorridaInput = {
    create?: XOR<RecompensasCreateWithoutCorridaInput, RecompensasUncheckedCreateWithoutCorridaInput> | RecompensasCreateWithoutCorridaInput[] | RecompensasUncheckedCreateWithoutCorridaInput[]
    connectOrCreate?: RecompensasCreateOrConnectWithoutCorridaInput | RecompensasCreateOrConnectWithoutCorridaInput[]
    createMany?: RecompensasCreateManyCorridaInputEnvelope
    connect?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
  }

  export type UsuariosUpdateOneRequiredWithoutCorridasComoPassageiroNestedInput = {
    create?: XOR<UsuariosCreateWithoutCorridasComoPassageiroInput, UsuariosUncheckedCreateWithoutCorridasComoPassageiroInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutCorridasComoPassageiroInput
    upsert?: UsuariosUpsertWithoutCorridasComoPassageiroInput
    connect?: UsuariosWhereUniqueInput
    update?: XOR<XOR<UsuariosUpdateToOneWithWhereWithoutCorridasComoPassageiroInput, UsuariosUpdateWithoutCorridasComoPassageiroInput>, UsuariosUncheckedUpdateWithoutCorridasComoPassageiroInput>
  }

  export type UsuariosUpdateOneWithoutCorridasComoMotoristaNestedInput = {
    create?: XOR<UsuariosCreateWithoutCorridasComoMotoristaInput, UsuariosUncheckedCreateWithoutCorridasComoMotoristaInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutCorridasComoMotoristaInput
    upsert?: UsuariosUpsertWithoutCorridasComoMotoristaInput
    disconnect?: UsuariosWhereInput | boolean
    delete?: UsuariosWhereInput | boolean
    connect?: UsuariosWhereUniqueInput
    update?: XOR<XOR<UsuariosUpdateToOneWithWhereWithoutCorridasComoMotoristaInput, UsuariosUpdateWithoutCorridasComoMotoristaInput>, UsuariosUncheckedUpdateWithoutCorridasComoMotoristaInput>
  }

  export type RecompensasUpdateManyWithoutCorridaNestedInput = {
    create?: XOR<RecompensasCreateWithoutCorridaInput, RecompensasUncheckedCreateWithoutCorridaInput> | RecompensasCreateWithoutCorridaInput[] | RecompensasUncheckedCreateWithoutCorridaInput[]
    connectOrCreate?: RecompensasCreateOrConnectWithoutCorridaInput | RecompensasCreateOrConnectWithoutCorridaInput[]
    upsert?: RecompensasUpsertWithWhereUniqueWithoutCorridaInput | RecompensasUpsertWithWhereUniqueWithoutCorridaInput[]
    createMany?: RecompensasCreateManyCorridaInputEnvelope
    set?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    disconnect?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    delete?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    connect?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    update?: RecompensasUpdateWithWhereUniqueWithoutCorridaInput | RecompensasUpdateWithWhereUniqueWithoutCorridaInput[]
    updateMany?: RecompensasUpdateManyWithWhereWithoutCorridaInput | RecompensasUpdateManyWithWhereWithoutCorridaInput[]
    deleteMany?: RecompensasScalarWhereInput | RecompensasScalarWhereInput[]
  }

  export type RecompensasUncheckedUpdateManyWithoutCorridaNestedInput = {
    create?: XOR<RecompensasCreateWithoutCorridaInput, RecompensasUncheckedCreateWithoutCorridaInput> | RecompensasCreateWithoutCorridaInput[] | RecompensasUncheckedCreateWithoutCorridaInput[]
    connectOrCreate?: RecompensasCreateOrConnectWithoutCorridaInput | RecompensasCreateOrConnectWithoutCorridaInput[]
    upsert?: RecompensasUpsertWithWhereUniqueWithoutCorridaInput | RecompensasUpsertWithWhereUniqueWithoutCorridaInput[]
    createMany?: RecompensasCreateManyCorridaInputEnvelope
    set?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    disconnect?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    delete?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    connect?: RecompensasWhereUniqueInput | RecompensasWhereUniqueInput[]
    update?: RecompensasUpdateWithWhereUniqueWithoutCorridaInput | RecompensasUpdateWithWhereUniqueWithoutCorridaInput[]
    updateMany?: RecompensasUpdateManyWithWhereWithoutCorridaInput | RecompensasUpdateManyWithWhereWithoutCorridaInput[]
    deleteMany?: RecompensasScalarWhereInput | RecompensasScalarWhereInput[]
  }

  export type UsuariosCreateNestedOneWithoutRecompensasInput = {
    create?: XOR<UsuariosCreateWithoutRecompensasInput, UsuariosUncheckedCreateWithoutRecompensasInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutRecompensasInput
    connect?: UsuariosWhereUniqueInput
  }

  export type CorridasCreateNestedOneWithoutRecompensasInput = {
    create?: XOR<CorridasCreateWithoutRecompensasInput, CorridasUncheckedCreateWithoutRecompensasInput>
    connectOrCreate?: CorridasCreateOrConnectWithoutRecompensasInput
    connect?: CorridasWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsuariosUpdateOneRequiredWithoutRecompensasNestedInput = {
    create?: XOR<UsuariosCreateWithoutRecompensasInput, UsuariosUncheckedCreateWithoutRecompensasInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutRecompensasInput
    upsert?: UsuariosUpsertWithoutRecompensasInput
    connect?: UsuariosWhereUniqueInput
    update?: XOR<XOR<UsuariosUpdateToOneWithWhereWithoutRecompensasInput, UsuariosUpdateWithoutRecompensasInput>, UsuariosUncheckedUpdateWithoutRecompensasInput>
  }

  export type CorridasUpdateOneWithoutRecompensasNestedInput = {
    create?: XOR<CorridasCreateWithoutRecompensasInput, CorridasUncheckedCreateWithoutRecompensasInput>
    connectOrCreate?: CorridasCreateOrConnectWithoutRecompensasInput
    upsert?: CorridasUpsertWithoutRecompensasInput
    disconnect?: CorridasWhereInput | boolean
    delete?: CorridasWhereInput | boolean
    connect?: CorridasWhereUniqueInput
    update?: XOR<XOR<CorridasUpdateToOneWithWhereWithoutRecompensasInput, CorridasUpdateWithoutRecompensasInput>, CorridasUncheckedUpdateWithoutRecompensasInput>
  }

  export type UsuariosCreateNestedOneWithoutCarteirasInput = {
    create?: XOR<UsuariosCreateWithoutCarteirasInput, UsuariosUncheckedCreateWithoutCarteirasInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutCarteirasInput
    connect?: UsuariosWhereUniqueInput
  }

  export type UsuariosUpdateOneRequiredWithoutCarteirasNestedInput = {
    create?: XOR<UsuariosCreateWithoutCarteirasInput, UsuariosUncheckedCreateWithoutCarteirasInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutCarteirasInput
    upsert?: UsuariosUpsertWithoutCarteirasInput
    connect?: UsuariosWhereUniqueInput
    update?: XOR<XOR<UsuariosUpdateToOneWithWhereWithoutCarteirasInput, UsuariosUpdateWithoutCarteirasInput>, UsuariosUncheckedUpdateWithoutCarteirasInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CarteirasCreateWithoutUsuarioInput = {
    id?: string
    saldo?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarteirasUncheckedCreateWithoutUsuarioInput = {
    id?: string
    saldo?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarteirasCreateOrConnectWithoutUsuarioInput = {
    where: CarteirasWhereUniqueInput
    create: XOR<CarteirasCreateWithoutUsuarioInput, CarteirasUncheckedCreateWithoutUsuarioInput>
  }

  export type CarteirasCreateManyUsuarioInputEnvelope = {
    data: CarteirasCreateManyUsuarioInput | CarteirasCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type CorridasCreateWithoutPassageiroInput = {
    id?: string
    dataHora: Date | string
    localInicio: string
    localFim: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    motorista?: UsuariosCreateNestedOneWithoutCorridasComoMotoristaInput
    Recompensas?: RecompensasCreateNestedManyWithoutCorridaInput
  }

  export type CorridasUncheckedCreateWithoutPassageiroInput = {
    id?: string
    motoristaId?: string | null
    dataHora: Date | string
    localInicio: string
    localFim: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Recompensas?: RecompensasUncheckedCreateNestedManyWithoutCorridaInput
  }

  export type CorridasCreateOrConnectWithoutPassageiroInput = {
    where: CorridasWhereUniqueInput
    create: XOR<CorridasCreateWithoutPassageiroInput, CorridasUncheckedCreateWithoutPassageiroInput>
  }

  export type CorridasCreateManyPassageiroInputEnvelope = {
    data: CorridasCreateManyPassageiroInput | CorridasCreateManyPassageiroInput[]
    skipDuplicates?: boolean
  }

  export type CorridasCreateWithoutMotoristaInput = {
    id?: string
    dataHora: Date | string
    localInicio: string
    localFim: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    passageiro: UsuariosCreateNestedOneWithoutCorridasComoPassageiroInput
    Recompensas?: RecompensasCreateNestedManyWithoutCorridaInput
  }

  export type CorridasUncheckedCreateWithoutMotoristaInput = {
    id?: string
    passageiroId: string
    dataHora: Date | string
    localInicio: string
    localFim: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Recompensas?: RecompensasUncheckedCreateNestedManyWithoutCorridaInput
  }

  export type CorridasCreateOrConnectWithoutMotoristaInput = {
    where: CorridasWhereUniqueInput
    create: XOR<CorridasCreateWithoutMotoristaInput, CorridasUncheckedCreateWithoutMotoristaInput>
  }

  export type CorridasCreateManyMotoristaInputEnvelope = {
    data: CorridasCreateManyMotoristaInput | CorridasCreateManyMotoristaInput[]
    skipDuplicates?: boolean
  }

  export type RecompensasCreateWithoutUsuarioInput = {
    id?: string
    valor: number
    tipo: string
    data: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    corrida?: CorridasCreateNestedOneWithoutRecompensasInput
  }

  export type RecompensasUncheckedCreateWithoutUsuarioInput = {
    id?: string
    corridaId?: string | null
    valor: number
    tipo: string
    data: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecompensasCreateOrConnectWithoutUsuarioInput = {
    where: RecompensasWhereUniqueInput
    create: XOR<RecompensasCreateWithoutUsuarioInput, RecompensasUncheckedCreateWithoutUsuarioInput>
  }

  export type RecompensasCreateManyUsuarioInputEnvelope = {
    data: RecompensasCreateManyUsuarioInput | RecompensasCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type CarteirasUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: CarteirasWhereUniqueInput
    update: XOR<CarteirasUpdateWithoutUsuarioInput, CarteirasUncheckedUpdateWithoutUsuarioInput>
    create: XOR<CarteirasCreateWithoutUsuarioInput, CarteirasUncheckedCreateWithoutUsuarioInput>
  }

  export type CarteirasUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: CarteirasWhereUniqueInput
    data: XOR<CarteirasUpdateWithoutUsuarioInput, CarteirasUncheckedUpdateWithoutUsuarioInput>
  }

  export type CarteirasUpdateManyWithWhereWithoutUsuarioInput = {
    where: CarteirasScalarWhereInput
    data: XOR<CarteirasUpdateManyMutationInput, CarteirasUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type CarteirasScalarWhereInput = {
    AND?: CarteirasScalarWhereInput | CarteirasScalarWhereInput[]
    OR?: CarteirasScalarWhereInput[]
    NOT?: CarteirasScalarWhereInput | CarteirasScalarWhereInput[]
    id?: StringFilter<"Carteiras"> | string
    usuarioId?: StringFilter<"Carteiras"> | string
    saldo?: FloatFilter<"Carteiras"> | number
    createdAt?: DateTimeFilter<"Carteiras"> | Date | string
    updatedAt?: DateTimeFilter<"Carteiras"> | Date | string
  }

  export type CorridasUpsertWithWhereUniqueWithoutPassageiroInput = {
    where: CorridasWhereUniqueInput
    update: XOR<CorridasUpdateWithoutPassageiroInput, CorridasUncheckedUpdateWithoutPassageiroInput>
    create: XOR<CorridasCreateWithoutPassageiroInput, CorridasUncheckedCreateWithoutPassageiroInput>
  }

  export type CorridasUpdateWithWhereUniqueWithoutPassageiroInput = {
    where: CorridasWhereUniqueInput
    data: XOR<CorridasUpdateWithoutPassageiroInput, CorridasUncheckedUpdateWithoutPassageiroInput>
  }

  export type CorridasUpdateManyWithWhereWithoutPassageiroInput = {
    where: CorridasScalarWhereInput
    data: XOR<CorridasUpdateManyMutationInput, CorridasUncheckedUpdateManyWithoutPassageiroInput>
  }

  export type CorridasScalarWhereInput = {
    AND?: CorridasScalarWhereInput | CorridasScalarWhereInput[]
    OR?: CorridasScalarWhereInput[]
    NOT?: CorridasScalarWhereInput | CorridasScalarWhereInput[]
    id?: StringFilter<"Corridas"> | string
    passageiroId?: StringFilter<"Corridas"> | string
    motoristaId?: StringNullableFilter<"Corridas"> | string | null
    dataHora?: DateTimeFilter<"Corridas"> | Date | string
    localInicio?: StringFilter<"Corridas"> | string
    localFim?: StringFilter<"Corridas"> | string
    status?: StringFilter<"Corridas"> | string
    createdAt?: DateTimeFilter<"Corridas"> | Date | string
    updatedAt?: DateTimeFilter<"Corridas"> | Date | string
  }

  export type CorridasUpsertWithWhereUniqueWithoutMotoristaInput = {
    where: CorridasWhereUniqueInput
    update: XOR<CorridasUpdateWithoutMotoristaInput, CorridasUncheckedUpdateWithoutMotoristaInput>
    create: XOR<CorridasCreateWithoutMotoristaInput, CorridasUncheckedCreateWithoutMotoristaInput>
  }

  export type CorridasUpdateWithWhereUniqueWithoutMotoristaInput = {
    where: CorridasWhereUniqueInput
    data: XOR<CorridasUpdateWithoutMotoristaInput, CorridasUncheckedUpdateWithoutMotoristaInput>
  }

  export type CorridasUpdateManyWithWhereWithoutMotoristaInput = {
    where: CorridasScalarWhereInput
    data: XOR<CorridasUpdateManyMutationInput, CorridasUncheckedUpdateManyWithoutMotoristaInput>
  }

  export type RecompensasUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: RecompensasWhereUniqueInput
    update: XOR<RecompensasUpdateWithoutUsuarioInput, RecompensasUncheckedUpdateWithoutUsuarioInput>
    create: XOR<RecompensasCreateWithoutUsuarioInput, RecompensasUncheckedCreateWithoutUsuarioInput>
  }

  export type RecompensasUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: RecompensasWhereUniqueInput
    data: XOR<RecompensasUpdateWithoutUsuarioInput, RecompensasUncheckedUpdateWithoutUsuarioInput>
  }

  export type RecompensasUpdateManyWithWhereWithoutUsuarioInput = {
    where: RecompensasScalarWhereInput
    data: XOR<RecompensasUpdateManyMutationInput, RecompensasUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type RecompensasScalarWhereInput = {
    AND?: RecompensasScalarWhereInput | RecompensasScalarWhereInput[]
    OR?: RecompensasScalarWhereInput[]
    NOT?: RecompensasScalarWhereInput | RecompensasScalarWhereInput[]
    id?: StringFilter<"Recompensas"> | string
    usuarioId?: StringFilter<"Recompensas"> | string
    corridaId?: StringNullableFilter<"Recompensas"> | string | null
    valor?: FloatFilter<"Recompensas"> | number
    tipo?: StringFilter<"Recompensas"> | string
    data?: DateTimeFilter<"Recompensas"> | Date | string
    createdAt?: DateTimeFilter<"Recompensas"> | Date | string
    updatedAt?: DateTimeFilter<"Recompensas"> | Date | string
  }

  export type UsuariosCreateWithoutCorridasComoPassageiroInput = {
    id?: string
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    endereco?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Carteiras?: CarteirasCreateNestedManyWithoutUsuarioInput
    CorridasComoMotorista?: CorridasCreateNestedManyWithoutMotoristaInput
    Recompensas?: RecompensasCreateNestedManyWithoutUsuarioInput
  }

  export type UsuariosUncheckedCreateWithoutCorridasComoPassageiroInput = {
    id?: string
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    endereco?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Carteiras?: CarteirasUncheckedCreateNestedManyWithoutUsuarioInput
    CorridasComoMotorista?: CorridasUncheckedCreateNestedManyWithoutMotoristaInput
    Recompensas?: RecompensasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuariosCreateOrConnectWithoutCorridasComoPassageiroInput = {
    where: UsuariosWhereUniqueInput
    create: XOR<UsuariosCreateWithoutCorridasComoPassageiroInput, UsuariosUncheckedCreateWithoutCorridasComoPassageiroInput>
  }

  export type UsuariosCreateWithoutCorridasComoMotoristaInput = {
    id?: string
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    endereco?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Carteiras?: CarteirasCreateNestedManyWithoutUsuarioInput
    CorridasComoPassageiro?: CorridasCreateNestedManyWithoutPassageiroInput
    Recompensas?: RecompensasCreateNestedManyWithoutUsuarioInput
  }

  export type UsuariosUncheckedCreateWithoutCorridasComoMotoristaInput = {
    id?: string
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    endereco?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Carteiras?: CarteirasUncheckedCreateNestedManyWithoutUsuarioInput
    CorridasComoPassageiro?: CorridasUncheckedCreateNestedManyWithoutPassageiroInput
    Recompensas?: RecompensasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuariosCreateOrConnectWithoutCorridasComoMotoristaInput = {
    where: UsuariosWhereUniqueInput
    create: XOR<UsuariosCreateWithoutCorridasComoMotoristaInput, UsuariosUncheckedCreateWithoutCorridasComoMotoristaInput>
  }

  export type RecompensasCreateWithoutCorridaInput = {
    id?: string
    valor: number
    tipo: string
    data: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    usuario: UsuariosCreateNestedOneWithoutRecompensasInput
  }

  export type RecompensasUncheckedCreateWithoutCorridaInput = {
    id?: string
    usuarioId: string
    valor: number
    tipo: string
    data: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecompensasCreateOrConnectWithoutCorridaInput = {
    where: RecompensasWhereUniqueInput
    create: XOR<RecompensasCreateWithoutCorridaInput, RecompensasUncheckedCreateWithoutCorridaInput>
  }

  export type RecompensasCreateManyCorridaInputEnvelope = {
    data: RecompensasCreateManyCorridaInput | RecompensasCreateManyCorridaInput[]
    skipDuplicates?: boolean
  }

  export type UsuariosUpsertWithoutCorridasComoPassageiroInput = {
    update: XOR<UsuariosUpdateWithoutCorridasComoPassageiroInput, UsuariosUncheckedUpdateWithoutCorridasComoPassageiroInput>
    create: XOR<UsuariosCreateWithoutCorridasComoPassageiroInput, UsuariosUncheckedCreateWithoutCorridasComoPassageiroInput>
    where?: UsuariosWhereInput
  }

  export type UsuariosUpdateToOneWithWhereWithoutCorridasComoPassageiroInput = {
    where?: UsuariosWhereInput
    data: XOR<UsuariosUpdateWithoutCorridasComoPassageiroInput, UsuariosUncheckedUpdateWithoutCorridasComoPassageiroInput>
  }

  export type UsuariosUpdateWithoutCorridasComoPassageiroInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Carteiras?: CarteirasUpdateManyWithoutUsuarioNestedInput
    CorridasComoMotorista?: CorridasUpdateManyWithoutMotoristaNestedInput
    Recompensas?: RecompensasUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuariosUncheckedUpdateWithoutCorridasComoPassageiroInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Carteiras?: CarteirasUncheckedUpdateManyWithoutUsuarioNestedInput
    CorridasComoMotorista?: CorridasUncheckedUpdateManyWithoutMotoristaNestedInput
    Recompensas?: RecompensasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuariosUpsertWithoutCorridasComoMotoristaInput = {
    update: XOR<UsuariosUpdateWithoutCorridasComoMotoristaInput, UsuariosUncheckedUpdateWithoutCorridasComoMotoristaInput>
    create: XOR<UsuariosCreateWithoutCorridasComoMotoristaInput, UsuariosUncheckedCreateWithoutCorridasComoMotoristaInput>
    where?: UsuariosWhereInput
  }

  export type UsuariosUpdateToOneWithWhereWithoutCorridasComoMotoristaInput = {
    where?: UsuariosWhereInput
    data: XOR<UsuariosUpdateWithoutCorridasComoMotoristaInput, UsuariosUncheckedUpdateWithoutCorridasComoMotoristaInput>
  }

  export type UsuariosUpdateWithoutCorridasComoMotoristaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Carteiras?: CarteirasUpdateManyWithoutUsuarioNestedInput
    CorridasComoPassageiro?: CorridasUpdateManyWithoutPassageiroNestedInput
    Recompensas?: RecompensasUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuariosUncheckedUpdateWithoutCorridasComoMotoristaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Carteiras?: CarteirasUncheckedUpdateManyWithoutUsuarioNestedInput
    CorridasComoPassageiro?: CorridasUncheckedUpdateManyWithoutPassageiroNestedInput
    Recompensas?: RecompensasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type RecompensasUpsertWithWhereUniqueWithoutCorridaInput = {
    where: RecompensasWhereUniqueInput
    update: XOR<RecompensasUpdateWithoutCorridaInput, RecompensasUncheckedUpdateWithoutCorridaInput>
    create: XOR<RecompensasCreateWithoutCorridaInput, RecompensasUncheckedCreateWithoutCorridaInput>
  }

  export type RecompensasUpdateWithWhereUniqueWithoutCorridaInput = {
    where: RecompensasWhereUniqueInput
    data: XOR<RecompensasUpdateWithoutCorridaInput, RecompensasUncheckedUpdateWithoutCorridaInput>
  }

  export type RecompensasUpdateManyWithWhereWithoutCorridaInput = {
    where: RecompensasScalarWhereInput
    data: XOR<RecompensasUpdateManyMutationInput, RecompensasUncheckedUpdateManyWithoutCorridaInput>
  }

  export type UsuariosCreateWithoutRecompensasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    endereco?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Carteiras?: CarteirasCreateNestedManyWithoutUsuarioInput
    CorridasComoPassageiro?: CorridasCreateNestedManyWithoutPassageiroInput
    CorridasComoMotorista?: CorridasCreateNestedManyWithoutMotoristaInput
  }

  export type UsuariosUncheckedCreateWithoutRecompensasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    endereco?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Carteiras?: CarteirasUncheckedCreateNestedManyWithoutUsuarioInput
    CorridasComoPassageiro?: CorridasUncheckedCreateNestedManyWithoutPassageiroInput
    CorridasComoMotorista?: CorridasUncheckedCreateNestedManyWithoutMotoristaInput
  }

  export type UsuariosCreateOrConnectWithoutRecompensasInput = {
    where: UsuariosWhereUniqueInput
    create: XOR<UsuariosCreateWithoutRecompensasInput, UsuariosUncheckedCreateWithoutRecompensasInput>
  }

  export type CorridasCreateWithoutRecompensasInput = {
    id?: string
    dataHora: Date | string
    localInicio: string
    localFim: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    passageiro: UsuariosCreateNestedOneWithoutCorridasComoPassageiroInput
    motorista?: UsuariosCreateNestedOneWithoutCorridasComoMotoristaInput
  }

  export type CorridasUncheckedCreateWithoutRecompensasInput = {
    id?: string
    passageiroId: string
    motoristaId?: string | null
    dataHora: Date | string
    localInicio: string
    localFim: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CorridasCreateOrConnectWithoutRecompensasInput = {
    where: CorridasWhereUniqueInput
    create: XOR<CorridasCreateWithoutRecompensasInput, CorridasUncheckedCreateWithoutRecompensasInput>
  }

  export type UsuariosUpsertWithoutRecompensasInput = {
    update: XOR<UsuariosUpdateWithoutRecompensasInput, UsuariosUncheckedUpdateWithoutRecompensasInput>
    create: XOR<UsuariosCreateWithoutRecompensasInput, UsuariosUncheckedCreateWithoutRecompensasInput>
    where?: UsuariosWhereInput
  }

  export type UsuariosUpdateToOneWithWhereWithoutRecompensasInput = {
    where?: UsuariosWhereInput
    data: XOR<UsuariosUpdateWithoutRecompensasInput, UsuariosUncheckedUpdateWithoutRecompensasInput>
  }

  export type UsuariosUpdateWithoutRecompensasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Carteiras?: CarteirasUpdateManyWithoutUsuarioNestedInput
    CorridasComoPassageiro?: CorridasUpdateManyWithoutPassageiroNestedInput
    CorridasComoMotorista?: CorridasUpdateManyWithoutMotoristaNestedInput
  }

  export type UsuariosUncheckedUpdateWithoutRecompensasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Carteiras?: CarteirasUncheckedUpdateManyWithoutUsuarioNestedInput
    CorridasComoPassageiro?: CorridasUncheckedUpdateManyWithoutPassageiroNestedInput
    CorridasComoMotorista?: CorridasUncheckedUpdateManyWithoutMotoristaNestedInput
  }

  export type CorridasUpsertWithoutRecompensasInput = {
    update: XOR<CorridasUpdateWithoutRecompensasInput, CorridasUncheckedUpdateWithoutRecompensasInput>
    create: XOR<CorridasCreateWithoutRecompensasInput, CorridasUncheckedCreateWithoutRecompensasInput>
    where?: CorridasWhereInput
  }

  export type CorridasUpdateToOneWithWhereWithoutRecompensasInput = {
    where?: CorridasWhereInput
    data: XOR<CorridasUpdateWithoutRecompensasInput, CorridasUncheckedUpdateWithoutRecompensasInput>
  }

  export type CorridasUpdateWithoutRecompensasInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataHora?: DateTimeFieldUpdateOperationsInput | Date | string
    localInicio?: StringFieldUpdateOperationsInput | string
    localFim?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passageiro?: UsuariosUpdateOneRequiredWithoutCorridasComoPassageiroNestedInput
    motorista?: UsuariosUpdateOneWithoutCorridasComoMotoristaNestedInput
  }

  export type CorridasUncheckedUpdateWithoutRecompensasInput = {
    id?: StringFieldUpdateOperationsInput | string
    passageiroId?: StringFieldUpdateOperationsInput | string
    motoristaId?: NullableStringFieldUpdateOperationsInput | string | null
    dataHora?: DateTimeFieldUpdateOperationsInput | Date | string
    localInicio?: StringFieldUpdateOperationsInput | string
    localFim?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuariosCreateWithoutCarteirasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    endereco?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    CorridasComoPassageiro?: CorridasCreateNestedManyWithoutPassageiroInput
    CorridasComoMotorista?: CorridasCreateNestedManyWithoutMotoristaInput
    Recompensas?: RecompensasCreateNestedManyWithoutUsuarioInput
  }

  export type UsuariosUncheckedCreateWithoutCarteirasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    cpf: string
    celular: string
    endereco?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    CorridasComoPassageiro?: CorridasUncheckedCreateNestedManyWithoutPassageiroInput
    CorridasComoMotorista?: CorridasUncheckedCreateNestedManyWithoutMotoristaInput
    Recompensas?: RecompensasUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuariosCreateOrConnectWithoutCarteirasInput = {
    where: UsuariosWhereUniqueInput
    create: XOR<UsuariosCreateWithoutCarteirasInput, UsuariosUncheckedCreateWithoutCarteirasInput>
  }

  export type UsuariosUpsertWithoutCarteirasInput = {
    update: XOR<UsuariosUpdateWithoutCarteirasInput, UsuariosUncheckedUpdateWithoutCarteirasInput>
    create: XOR<UsuariosCreateWithoutCarteirasInput, UsuariosUncheckedCreateWithoutCarteirasInput>
    where?: UsuariosWhereInput
  }

  export type UsuariosUpdateToOneWithWhereWithoutCarteirasInput = {
    where?: UsuariosWhereInput
    data: XOR<UsuariosUpdateWithoutCarteirasInput, UsuariosUncheckedUpdateWithoutCarteirasInput>
  }

  export type UsuariosUpdateWithoutCarteirasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CorridasComoPassageiro?: CorridasUpdateManyWithoutPassageiroNestedInput
    CorridasComoMotorista?: CorridasUpdateManyWithoutMotoristaNestedInput
    Recompensas?: RecompensasUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuariosUncheckedUpdateWithoutCarteirasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CorridasComoPassageiro?: CorridasUncheckedUpdateManyWithoutPassageiroNestedInput
    CorridasComoMotorista?: CorridasUncheckedUpdateManyWithoutMotoristaNestedInput
    Recompensas?: RecompensasUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type CarteirasCreateManyUsuarioInput = {
    id?: string
    saldo?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CorridasCreateManyPassageiroInput = {
    id?: string
    motoristaId?: string | null
    dataHora: Date | string
    localInicio: string
    localFim: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CorridasCreateManyMotoristaInput = {
    id?: string
    passageiroId: string
    dataHora: Date | string
    localInicio: string
    localFim: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecompensasCreateManyUsuarioInput = {
    id?: string
    corridaId?: string | null
    valor: number
    tipo: string
    data: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarteirasUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarteirasUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarteirasUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    saldo?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorridasUpdateWithoutPassageiroInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataHora?: DateTimeFieldUpdateOperationsInput | Date | string
    localInicio?: StringFieldUpdateOperationsInput | string
    localFim?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    motorista?: UsuariosUpdateOneWithoutCorridasComoMotoristaNestedInput
    Recompensas?: RecompensasUpdateManyWithoutCorridaNestedInput
  }

  export type CorridasUncheckedUpdateWithoutPassageiroInput = {
    id?: StringFieldUpdateOperationsInput | string
    motoristaId?: NullableStringFieldUpdateOperationsInput | string | null
    dataHora?: DateTimeFieldUpdateOperationsInput | Date | string
    localInicio?: StringFieldUpdateOperationsInput | string
    localFim?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Recompensas?: RecompensasUncheckedUpdateManyWithoutCorridaNestedInput
  }

  export type CorridasUncheckedUpdateManyWithoutPassageiroInput = {
    id?: StringFieldUpdateOperationsInput | string
    motoristaId?: NullableStringFieldUpdateOperationsInput | string | null
    dataHora?: DateTimeFieldUpdateOperationsInput | Date | string
    localInicio?: StringFieldUpdateOperationsInput | string
    localFim?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorridasUpdateWithoutMotoristaInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataHora?: DateTimeFieldUpdateOperationsInput | Date | string
    localInicio?: StringFieldUpdateOperationsInput | string
    localFim?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passageiro?: UsuariosUpdateOneRequiredWithoutCorridasComoPassageiroNestedInput
    Recompensas?: RecompensasUpdateManyWithoutCorridaNestedInput
  }

  export type CorridasUncheckedUpdateWithoutMotoristaInput = {
    id?: StringFieldUpdateOperationsInput | string
    passageiroId?: StringFieldUpdateOperationsInput | string
    dataHora?: DateTimeFieldUpdateOperationsInput | Date | string
    localInicio?: StringFieldUpdateOperationsInput | string
    localFim?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Recompensas?: RecompensasUncheckedUpdateManyWithoutCorridaNestedInput
  }

  export type CorridasUncheckedUpdateManyWithoutMotoristaInput = {
    id?: StringFieldUpdateOperationsInput | string
    passageiroId?: StringFieldUpdateOperationsInput | string
    dataHora?: DateTimeFieldUpdateOperationsInput | Date | string
    localInicio?: StringFieldUpdateOperationsInput | string
    localFim?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecompensasUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corrida?: CorridasUpdateOneWithoutRecompensasNestedInput
  }

  export type RecompensasUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    corridaId?: NullableStringFieldUpdateOperationsInput | string | null
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecompensasUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    corridaId?: NullableStringFieldUpdateOperationsInput | string | null
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecompensasCreateManyCorridaInput = {
    id?: string
    usuarioId: string
    valor: number
    tipo: string
    data: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecompensasUpdateWithoutCorridaInput = {
    id?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuariosUpdateOneRequiredWithoutRecompensasNestedInput
  }

  export type RecompensasUncheckedUpdateWithoutCorridaInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecompensasUncheckedUpdateManyWithoutCorridaInput = {
    id?: StringFieldUpdateOperationsInput | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}